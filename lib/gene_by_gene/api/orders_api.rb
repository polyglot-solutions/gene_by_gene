=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module GeneByGene
  class OrdersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create order for the given existing kit numbers
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrderForExistingKits] :create_order_for_existing_kits 
    # @return [OrderDto]
    def api_v2_orders_actions_create_order_for_existing_kits_post(opts = {})
      data, _status_code, _headers = api_v2_orders_actions_create_order_for_existing_kits_post_with_http_info(opts)
      data
    end

    # Create order for the given existing kit numbers
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrderForExistingKits] :create_order_for_existing_kits 
    # @return [Array<(OrderDto, Integer, Hash)>] OrderDto data, response status code and response headers
    def api_v2_orders_actions_create_order_for_existing_kits_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.api_v2_orders_actions_create_order_for_existing_kits_post ...'
      end
      # resource path
      local_var_path = '/api/v2/orders/actions/createOrderForExistingKits'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_order_for_existing_kits'])

      # return_type
      return_type = opts[:debug_return_type] || 'OrderDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OrdersApi.api_v2_orders_actions_create_order_for_existing_kits_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#api_v2_orders_actions_create_order_for_existing_kits_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get orders
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_id 
    # @option opts [Time] :order_date_min 
    # @option opts [Time] :order_date_max 
    # @option opts [String] :product_name 
    # @option opts [Integer] :offset 
    # @option opts [Integer] :page_size 
    # @return [GetOrdersOrderDtoPaginatedList]
    def api_v2_orders_get(opts = {})
      data, _status_code, _headers = api_v2_orders_get_with_http_info(opts)
      data
    end

    # Get orders
    # @param [Hash] opts the optional parameters
    # @option opts [String] :order_id 
    # @option opts [Time] :order_date_min 
    # @option opts [Time] :order_date_max 
    # @option opts [String] :product_name 
    # @option opts [Integer] :offset 
    # @option opts [Integer] :page_size 
    # @return [Array<(GetOrdersOrderDtoPaginatedList, Integer, Hash)>] GetOrdersOrderDtoPaginatedList data, response status code and response headers
    def api_v2_orders_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.api_v2_orders_get ...'
      end
      # resource path
      local_var_path = '/api/v2/orders'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'orderId'] = opts[:'order_id'] if !opts[:'order_id'].nil?
      query_params[:'orderDateMin'] = opts[:'order_date_min'] if !opts[:'order_date_min'].nil?
      query_params[:'orderDateMax'] = opts[:'order_date_max'] if !opts[:'order_date_max'].nil?
      query_params[:'productName'] = opts[:'product_name'] if !opts[:'product_name'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrdersOrderDtoPaginatedList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OrdersApi.api_v2_orders_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#api_v2_orders_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get order by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [OrderDto]
    def api_v2_orders_id_get(id, opts = {})
      data, _status_code, _headers = api_v2_orders_id_get_with_http_info(id, opts)
      data
    end

    # Get order by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(OrderDto, Integer, Hash)>] OrderDto data, response status code and response headers
    def api_v2_orders_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.api_v2_orders_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrdersApi.api_v2_orders_id_get"
      end
      # resource path
      local_var_path = '/api/v2/orders/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'OrderDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OrdersApi.api_v2_orders_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#api_v2_orders_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create order
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrder] :create_order 
    # @return [OrderDto]
    def api_v2_orders_post(opts = {})
      data, _status_code, _headers = api_v2_orders_post_with_http_info(opts)
      data
    end

    # Create order
    # @param [Hash] opts the optional parameters
    # @option opts [CreateOrder] :create_order 
    # @return [Array<(OrderDto, Integer, Hash)>] OrderDto data, response status code and response headers
    def api_v2_orders_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrdersApi.api_v2_orders_post ...'
      end
      # resource path
      local_var_path = '/api/v2/orders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_order'])

      # return_type
      return_type = opts[:debug_return_type] || 'OrderDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OrdersApi.api_v2_orders_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrdersApi#api_v2_orders_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
