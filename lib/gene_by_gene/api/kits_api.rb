=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module GeneByGene
  class KitsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Upload Kits Documents
    # Image or Text File only
    # @param kit_number [String] Kit Number
    # @param document_type [String] ClinicIntake, DriversLicense, Insurance, KitDocument, KitRequisitionForm, MedicalNecessity, ReleaseForm
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v2_kits_actions_kit_number_upload_documents_document_type_post(kit_number, document_type, opts = {})
      api_v2_kits_actions_kit_number_upload_documents_document_type_post_with_http_info(kit_number, document_type, opts)
      nil
    end

    # Upload Kits Documents
    # Image or Text File only
    # @param kit_number [String] Kit Number
    # @param document_type [String] ClinicIntake, DriversLicense, Insurance, KitDocument, KitRequisitionForm, MedicalNecessity, ReleaseForm
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v2_kits_actions_kit_number_upload_documents_document_type_post_with_http_info(kit_number, document_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_actions_kit_number_upload_documents_document_type_post ...'
      end
      # verify the required parameter 'kit_number' is set
      if @api_client.config.client_side_validation && kit_number.nil?
        fail ArgumentError, "Missing the required parameter 'kit_number' when calling KitsApi.api_v2_kits_actions_kit_number_upload_documents_document_type_post"
      end
      # verify the required parameter 'document_type' is set
      if @api_client.config.client_side_validation && document_type.nil?
        fail ArgumentError, "Missing the required parameter 'document_type' when calling KitsApi.api_v2_kits_actions_kit_number_upload_documents_document_type_post"
      end
      # resource path
      local_var_path = '/api/v2/kits/actions/{kitNumber}/uploadDocuments/{documentType}'.sub('{' + 'kitNumber' + '}', CGI.escape(kit_number.to_s)).sub('{' + 'documentType' + '}', CGI.escape(document_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_actions_kit_number_upload_documents_document_type_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_actions_kit_number_upload_documents_document_type_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v2_kits_actions_upload_kit_attributes_csv_post(opts = {})
      api_v2_kits_actions_upload_kit_attributes_csv_post_with_http_info(opts)
      nil
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v2_kits_actions_upload_kit_attributes_csv_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_actions_upload_kit_attributes_csv_post ...'
      end
      # resource path
      local_var_path = '/api/v2/kits/actions/uploadKitAttributesCSV'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_actions_upload_kit_attributes_csv_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_actions_upload_kit_attributes_csv_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get kits
    # OrderNumber = Parent OrderId  Status = Error, Canceled, Not Received, Received, In Lab, Completed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :kit_number 
    # @option opts [String] :order_number 
    # @option opts [String] :status 
    # @option opts [Integer] :offset 
    # @option opts [Integer] :page_size 
    # @return [GetKitsKitsOrdersDtoPaginatedList]
    def api_v2_kits_get(opts = {})
      data, _status_code, _headers = api_v2_kits_get_with_http_info(opts)
      data
    end

    # Get kits
    # OrderNumber &#x3D; Parent OrderId  Status &#x3D; Error, Canceled, Not Received, Received, In Lab, Completed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :kit_number 
    # @option opts [String] :order_number 
    # @option opts [String] :status 
    # @option opts [Integer] :offset 
    # @option opts [Integer] :page_size 
    # @return [Array<(GetKitsKitsOrdersDtoPaginatedList, Integer, Hash)>] GetKitsKitsOrdersDtoPaginatedList data, response status code and response headers
    def api_v2_kits_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_get ...'
      end
      # resource path
      local_var_path = '/api/v2/kits'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'kitNumber'] = opts[:'kit_number'] if !opts[:'kit_number'].nil?
      query_params[:'orderNumber'] = opts[:'order_number'] if !opts[:'order_number'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetKitsKitsOrdersDtoPaginatedList'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete kit single attribute
    # @param attribute_name [String] 
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v2_kits_kit_number_attribute_attribute_name_delete(attribute_name, kit_number, opts = {})
      api_v2_kits_kit_number_attribute_attribute_name_delete_with_http_info(attribute_name, kit_number, opts)
      nil
    end

    # Delete kit single attribute
    # @param attribute_name [String] 
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v2_kits_kit_number_attribute_attribute_name_delete_with_http_info(attribute_name, kit_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_kit_number_attribute_attribute_name_delete ...'
      end
      # verify the required parameter 'attribute_name' is set
      if @api_client.config.client_side_validation && attribute_name.nil?
        fail ArgumentError, "Missing the required parameter 'attribute_name' when calling KitsApi.api_v2_kits_kit_number_attribute_attribute_name_delete"
      end
      # verify the required parameter 'kit_number' is set
      if @api_client.config.client_side_validation && kit_number.nil?
        fail ArgumentError, "Missing the required parameter 'kit_number' when calling KitsApi.api_v2_kits_kit_number_attribute_attribute_name_delete"
      end
      # resource path
      local_var_path = '/api/v2/kits/{kitNumber}/attribute/{attributeName}'.sub('{' + 'attributeName' + '}', CGI.escape(attribute_name.to_s)).sub('{' + 'kitNumber' + '}', CGI.escape(kit_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_kit_number_attribute_attribute_name_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_kit_number_attribute_attribute_name_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete kit attributes
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v2_kits_kit_number_attributes_delete(kit_number, opts = {})
      api_v2_kits_kit_number_attributes_delete_with_http_info(kit_number, opts)
      nil
    end

    # Delete kit attributes
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v2_kits_kit_number_attributes_delete_with_http_info(kit_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_kit_number_attributes_delete ...'
      end
      # verify the required parameter 'kit_number' is set
      if @api_client.config.client_side_validation && kit_number.nil?
        fail ArgumentError, "Missing the required parameter 'kit_number' when calling KitsApi.api_v2_kits_kit_number_attributes_delete"
      end
      # resource path
      local_var_path = '/api/v2/kits/{kitNumber}/attributes'.sub('{' + 'kitNumber' + '}', CGI.escape(kit_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_kit_number_attributes_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_kit_number_attributes_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set kit attribute
    # @param kit_number [String] 
    # @param name [String] 
    # @param value [String] 
    # @param [Hash] opts the optional parameters
    # @return [KitAttributeValueDto]
    def api_v2_kits_kit_number_attributes_namevalue_patch(kit_number, name, value, opts = {})
      data, _status_code, _headers = api_v2_kits_kit_number_attributes_namevalue_patch_with_http_info(kit_number, name, value, opts)
      data
    end

    # Set kit attribute
    # @param kit_number [String] 
    # @param name [String] 
    # @param value [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KitAttributeValueDto, Integer, Hash)>] KitAttributeValueDto data, response status code and response headers
    def api_v2_kits_kit_number_attributes_namevalue_patch_with_http_info(kit_number, name, value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_kit_number_attributes_namevalue_patch ...'
      end
      # verify the required parameter 'kit_number' is set
      if @api_client.config.client_side_validation && kit_number.nil?
        fail ArgumentError, "Missing the required parameter 'kit_number' when calling KitsApi.api_v2_kits_kit_number_attributes_namevalue_patch"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling KitsApi.api_v2_kits_kit_number_attributes_namevalue_patch"
      end
      # verify the required parameter 'value' is set
      if @api_client.config.client_side_validation && value.nil?
        fail ArgumentError, "Missing the required parameter 'value' when calling KitsApi.api_v2_kits_kit_number_attributes_namevalue_patch"
      end
      # resource path
      local_var_path = '/api/v2/kits/{kitNumber}/attributes/{name}={value}'.sub('{' + 'kitNumber' + '}', CGI.escape(kit_number.to_s)).sub('{' + 'name' + '}', CGI.escape(name.to_s)).sub('{' + 'value' + '}', CGI.escape(value.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KitAttributeValueDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_kit_number_attributes_namevalue_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_kit_number_attributes_namevalue_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set kit attributes
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SetKitAttributeValues] :set_kit_attribute_values The kitnumber and attributes name,value pairs
    # @return [Array<KitAttributeValueDto>]
    def api_v2_kits_kit_number_attributes_patch(kit_number, opts = {})
      data, _status_code, _headers = api_v2_kits_kit_number_attributes_patch_with_http_info(kit_number, opts)
      data
    end

    # Set kit attributes
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [SetKitAttributeValues] :set_kit_attribute_values The kitnumber and attributes name,value pairs
    # @return [Array<(Array<KitAttributeValueDto>, Integer, Hash)>] Array<KitAttributeValueDto> data, response status code and response headers
    def api_v2_kits_kit_number_attributes_patch_with_http_info(kit_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_kit_number_attributes_patch ...'
      end
      # verify the required parameter 'kit_number' is set
      if @api_client.config.client_side_validation && kit_number.nil?
        fail ArgumentError, "Missing the required parameter 'kit_number' when calling KitsApi.api_v2_kits_kit_number_attributes_patch"
      end
      # resource path
      local_var_path = '/api/v2/kits/{kitNumber}/attributes'.sub('{' + 'kitNumber' + '}', CGI.escape(kit_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'set_kit_attribute_values'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<KitAttributeValueDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_kit_number_attributes_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_kit_number_attributes_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel the kit including the order line items.
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v2_kits_kit_number_delete(kit_number, opts = {})
      api_v2_kits_kit_number_delete_with_http_info(kit_number, opts)
      nil
    end

    # Cancel the kit including the order line items.
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v2_kits_kit_number_delete_with_http_info(kit_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_kit_number_delete ...'
      end
      # verify the required parameter 'kit_number' is set
      if @api_client.config.client_side_validation && kit_number.nil?
        fail ArgumentError, "Missing the required parameter 'kit_number' when calling KitsApi.api_v2_kits_kit_number_delete"
      end
      # resource path
      local_var_path = '/api/v2/kits/{kitNumber}'.sub('{' + 'kitNumber' + '}', CGI.escape(kit_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_kit_number_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_kit_number_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set kit gender
    # @param kit_number [String] 
    # @param gender [String] 
    # @param [Hash] opts the optional parameters
    # @return [KitSummaryDto]
    def api_v2_kits_kit_number_gender_gender_patch(kit_number, gender, opts = {})
      data, _status_code, _headers = api_v2_kits_kit_number_gender_gender_patch_with_http_info(kit_number, gender, opts)
      data
    end

    # Set kit gender
    # @param kit_number [String] 
    # @param gender [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KitSummaryDto, Integer, Hash)>] KitSummaryDto data, response status code and response headers
    def api_v2_kits_kit_number_gender_gender_patch_with_http_info(kit_number, gender, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_kit_number_gender_gender_patch ...'
      end
      # verify the required parameter 'kit_number' is set
      if @api_client.config.client_side_validation && kit_number.nil?
        fail ArgumentError, "Missing the required parameter 'kit_number' when calling KitsApi.api_v2_kits_kit_number_gender_gender_patch"
      end
      # verify the required parameter 'gender' is set
      if @api_client.config.client_side_validation && gender.nil?
        fail ArgumentError, "Missing the required parameter 'gender' when calling KitsApi.api_v2_kits_kit_number_gender_gender_patch"
      end
      # resource path
      local_var_path = '/api/v2/kits/{kitNumber}/gender/{gender}'.sub('{' + 'kitNumber' + '}', CGI.escape(kit_number.to_s)).sub('{' + 'gender' + '}', CGI.escape(gender.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KitSummaryDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_kit_number_gender_gender_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_kit_number_gender_gender_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get kit by kit number
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [KitDto]
    def api_v2_kits_kit_number_get(kit_number, opts = {})
      data, _status_code, _headers = api_v2_kits_kit_number_get_with_http_info(kit_number, opts)
      data
    end

    # Get kit by kit number
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KitDto, Integer, Hash)>] KitDto data, response status code and response headers
    def api_v2_kits_kit_number_get_with_http_info(kit_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_kit_number_get ...'
      end
      # verify the required parameter 'kit_number' is set
      if @api_client.config.client_side_validation && kit_number.nil?
        fail ArgumentError, "Missing the required parameter 'kit_number' when calling KitsApi.api_v2_kits_kit_number_get"
      end
      # resource path
      local_var_path = '/api/v2/kits/{kitNumber}'.sub('{' + 'kitNumber' + '}', CGI.escape(kit_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KitDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_kit_number_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_kit_number_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Cancel the kit including the order line items.
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v2_kits_kit_number_order_lines_delete(kit_number, opts = {})
      api_v2_kits_kit_number_order_lines_delete_with_http_info(kit_number, opts)
      nil
    end

    # Cancel the kit including the order line items.
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v2_kits_kit_number_order_lines_delete_with_http_info(kit_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_kit_number_order_lines_delete ...'
      end
      # verify the required parameter 'kit_number' is set
      if @api_client.config.client_side_validation && kit_number.nil?
        fail ArgumentError, "Missing the required parameter 'kit_number' when calling KitsApi.api_v2_kits_kit_number_order_lines_delete"
      end
      # resource path
      local_var_path = '/api/v2/kits/{kitNumber}/orderLines'.sub('{' + 'kitNumber' + '}', CGI.escape(kit_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_kit_number_order_lines_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_kit_number_order_lines_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get orders associated with a specific kit
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [KitsOrdersDto]
    def api_v2_kits_kit_number_orders_get(kit_number, opts = {})
      data, _status_code, _headers = api_v2_kits_kit_number_orders_get_with_http_info(kit_number, opts)
      data
    end

    # Get orders associated with a specific kit
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KitsOrdersDto, Integer, Hash)>] KitsOrdersDto data, response status code and response headers
    def api_v2_kits_kit_number_orders_get_with_http_info(kit_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_kit_number_orders_get ...'
      end
      # verify the required parameter 'kit_number' is set
      if @api_client.config.client_side_validation && kit_number.nil?
        fail ArgumentError, "Missing the required parameter 'kit_number' when calling KitsApi.api_v2_kits_kit_number_orders_get"
      end
      # resource path
      local_var_path = '/api/v2/kits/{kitNumber}/orders'.sub('{' + 'kitNumber' + '}', CGI.escape(kit_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KitsOrdersDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_kit_number_orders_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_kit_number_orders_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get kit order line results associated with a specific kit
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [KitResultsDto]
    def api_v2_kits_kit_number_results_get(kit_number, opts = {})
      data, _status_code, _headers = api_v2_kits_kit_number_results_get_with_http_info(kit_number, opts)
      data
    end

    # Get kit order line results associated with a specific kit
    # @param kit_number [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(KitResultsDto, Integer, Hash)>] KitResultsDto data, response status code and response headers
    def api_v2_kits_kit_number_results_get_with_http_info(kit_number, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: KitsApi.api_v2_kits_kit_number_results_get ...'
      end
      # verify the required parameter 'kit_number' is set
      if @api_client.config.client_side_validation && kit_number.nil?
        fail ArgumentError, "Missing the required parameter 'kit_number' when calling KitsApi.api_v2_kits_kit_number_results_get"
      end
      # resource path
      local_var_path = '/api/v2/kits/{kitNumber}/results'.sub('{' + 'kitNumber' + '}', CGI.escape(kit_number.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'KitResultsDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"KitsApi.api_v2_kits_kit_number_results_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: KitsApi#api_v2_kits_kit_number_results_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
