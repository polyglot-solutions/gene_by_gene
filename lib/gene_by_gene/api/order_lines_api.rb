=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module GeneByGene
  class OrderLinesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Cancels order line
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetOrderLineKitsByLineGuidResult]
    def api_v2_order_lines_id_delete(id, opts = {})
      data, _status_code, _headers = api_v2_order_lines_id_delete_with_http_info(id, opts)
      data
    end

    # Cancels order line
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOrderLineKitsByLineGuidResult, Integer, Hash)>] GetOrderLineKitsByLineGuidResult data, response status code and response headers
    def api_v2_order_lines_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderLinesApi.api_v2_order_lines_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderLinesApi.api_v2_order_lines_id_delete"
      end
      # resource path
      local_var_path = '/api/v2/orderLines/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrderLineKitsByLineGuidResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OrderLinesApi.api_v2_order_lines_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderLinesApi#api_v2_order_lines_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get order line by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetOrderLineItemByGuidResult]
    def api_v2_order_lines_id_get(id, opts = {})
      data, _status_code, _headers = api_v2_order_lines_id_get_with_http_info(id, opts)
      data
    end

    # Get order line by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetOrderLineItemByGuidResult, Integer, Hash)>] GetOrderLineItemByGuidResult data, response status code and response headers
    def api_v2_order_lines_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderLinesApi.api_v2_order_lines_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderLinesApi.api_v2_order_lines_id_get"
      end
      # resource path
      local_var_path = '/api/v2/orderLines/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrderLineItemByGuidResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OrderLinesApi.api_v2_order_lines_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderLinesApi#api_v2_order_lines_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get order line kits by line ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :page_size 
    # @return [GetOrderLineKitsByLineGuidResult]
    def api_v2_order_lines_id_kits_get(id, opts = {})
      data, _status_code, _headers = api_v2_order_lines_id_kits_get_with_http_info(id, opts)
      data
    end

    # Get order line kits by line ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :offset 
    # @option opts [Integer] :page_size 
    # @return [Array<(GetOrderLineKitsByLineGuidResult, Integer, Hash)>] GetOrderLineKitsByLineGuidResult data, response status code and response headers
    def api_v2_order_lines_id_kits_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OrderLinesApi.api_v2_order_lines_id_kits_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling OrderLinesApi.api_v2_order_lines_id_kits_get"
      end
      # resource path
      local_var_path = '/api/v2/orderLines/{id}/kits'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain', 'application/json', 'text/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetOrderLineKitsByLineGuidResult'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"OrderLinesApi.api_v2_order_lines_id_kits_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OrderLinesApi#api_v2_order_lines_id_kits_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
