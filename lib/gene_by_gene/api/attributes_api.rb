=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module GeneByGene
  class AttributesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get attribute definitions
    # @param entity_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<AttributeDefinitionDto>]
    def api_v2_attributes_entity_type_get(entity_type, opts = {})
      data, _status_code, _headers = api_v2_attributes_entity_type_get_with_http_info(entity_type, opts)
      data
    end

    # Get attribute definitions
    # @param entity_type [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AttributeDefinitionDto>, Integer, Hash)>] Array<AttributeDefinitionDto> data, response status code and response headers
    def api_v2_attributes_entity_type_get_with_http_info(entity_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributesApi.api_v2_attributes_entity_type_get ...'
      end
      # verify the required parameter 'entity_type' is set
      if @api_client.config.client_side_validation && entity_type.nil?
        fail ArgumentError, "Missing the required parameter 'entity_type' when calling AttributesApi.api_v2_attributes_entity_type_get"
      end
      # resource path
      local_var_path = '/api/v2/attributes/{entityType}'.sub('{' + 'entityType' + '}', CGI.escape(entity_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AttributeDefinitionDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"AttributesApi.api_v2_attributes_entity_type_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributesApi#api_v2_attributes_entity_type_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get attribute definitions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_type 
    # @return [Array<AttributeDefinitionDto>]
    def api_v2_attributes_get(opts = {})
      data, _status_code, _headers = api_v2_attributes_get_with_http_info(opts)
      data
    end

    # Get attribute definitions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_type 
    # @return [Array<(Array<AttributeDefinitionDto>, Integer, Hash)>] Array<AttributeDefinitionDto> data, response status code and response headers
    def api_v2_attributes_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributesApi.api_v2_attributes_get ...'
      end
      # resource path
      local_var_path = '/api/v2/attributes'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'entityType'] = opts[:'entity_type'] if !opts[:'entity_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AttributeDefinitionDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"AttributesApi.api_v2_attributes_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributesApi#api_v2_attributes_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list of attribute group definitions
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :query 
    # @return [Array<AttributeGroupDefinitionDto>]
    def api_v2_attributes_groups_get(opts = {})
      data, _status_code, _headers = api_v2_attributes_groups_get_with_http_info(opts)
      data
    end

    # Get list of attribute group definitions
    # @param [Hash] opts the optional parameters
    # @option opts [Object] :query 
    # @return [Array<(Array<AttributeGroupDefinitionDto>, Integer, Hash)>] Array<AttributeGroupDefinitionDto> data, response status code and response headers
    def api_v2_attributes_groups_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributesApi.api_v2_attributes_groups_get ...'
      end
      # resource path
      local_var_path = '/api/v2/attributes/groups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AttributeGroupDefinitionDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"AttributesApi.api_v2_attributes_groups_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributesApi#api_v2_attributes_groups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get attribute group definition
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [AttributeGroupDefinitionDto]
    def api_v2_attributes_groups_name_get(name, opts = {})
      data, _status_code, _headers = api_v2_attributes_groups_name_get_with_http_info(name, opts)
      data
    end

    # Get attribute group definition
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AttributeGroupDefinitionDto, Integer, Hash)>] AttributeGroupDefinitionDto data, response status code and response headers
    def api_v2_attributes_groups_name_get_with_http_info(name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AttributesApi.api_v2_attributes_groups_name_get ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AttributesApi.api_v2_attributes_groups_name_get"
      end
      # resource path
      local_var_path = '/api/v2/attributes/groups/{name}'.sub('{' + 'name' + '}', CGI.escape(name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AttributeGroupDefinitionDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"AttributesApi.api_v2_attributes_groups_name_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AttributesApi#api_v2_attributes_groups_name_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
