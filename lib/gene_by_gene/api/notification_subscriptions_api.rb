=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module GeneByGene
  class NotificationSubscriptionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get notification subscriptions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type 
    # @return [Array<NotificationSubscriptionDto>]
    def api_v2_notification_subscriptions_get(opts = {})
      data, _status_code, _headers = api_v2_notification_subscriptions_get_with_http_info(opts)
      data
    end

    # Get notification subscriptions
    # @param [Hash] opts the optional parameters
    # @option opts [String] :type 
    # @return [Array<(Array<NotificationSubscriptionDto>, Integer, Hash)>] Array<NotificationSubscriptionDto> data, response status code and response headers
    def api_v2_notification_subscriptions_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationSubscriptionsApi.api_v2_notification_subscriptions_get ...'
      end
      # resource path
      local_var_path = '/api/v2/notificationSubscriptions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<NotificationSubscriptionDto>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"NotificationSubscriptionsApi.api_v2_notification_subscriptions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationSubscriptionsApi#api_v2_notification_subscriptions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reset webhook secret
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [NotificationSubscriptionDto]
    def api_v2_notification_subscriptions_id_actions_reset_secret_post(id, opts = {})
      data, _status_code, _headers = api_v2_notification_subscriptions_id_actions_reset_secret_post_with_http_info(id, opts)
      data
    end

    # Reset webhook secret
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationSubscriptionDto, Integer, Hash)>] NotificationSubscriptionDto data, response status code and response headers
    def api_v2_notification_subscriptions_id_actions_reset_secret_post_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_actions_reset_secret_post ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_actions_reset_secret_post"
      end
      # resource path
      local_var_path = '/api/v2/notificationSubscriptions/{id}/actions/resetSecret'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NotificationSubscriptionDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_actions_reset_secret_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationSubscriptionsApi#api_v2_notification_subscriptions_id_actions_reset_secret_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsubscribe from events
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v2_notification_subscriptions_id_delete(id, opts = {})
      api_v2_notification_subscriptions_id_delete_with_http_info(id, opts)
      nil
    end

    # Unsubscribe from events
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v2_notification_subscriptions_id_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_delete"
      end
      # resource path
      local_var_path = '/api/v2/notificationSubscriptions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationSubscriptionsApi#api_v2_notification_subscriptions_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get notification subscription by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [NotificationSubscriptionDto]
    def api_v2_notification_subscriptions_id_get(id, opts = {})
      data, _status_code, _headers = api_v2_notification_subscriptions_id_get_with_http_info(id, opts)
      data
    end

    # Get notification subscription by ID
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationSubscriptionDto, Integer, Hash)>] NotificationSubscriptionDto data, response status code and response headers
    def api_v2_notification_subscriptions_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_get"
      end
      # resource path
      local_var_path = '/api/v2/notificationSubscriptions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'NotificationSubscriptionDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationSubscriptionsApi#api_v2_notification_subscriptions_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update notification subscription
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateNotificationSubscriptionCommand] :update_notification_subscription_command 
    # @return [NotificationSubscriptionDto]
    def api_v2_notification_subscriptions_id_patch(id, opts = {})
      data, _status_code, _headers = api_v2_notification_subscriptions_id_patch_with_http_info(id, opts)
      data
    end

    # Update notification subscription
    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateNotificationSubscriptionCommand] :update_notification_subscription_command 
    # @return [Array<(NotificationSubscriptionDto, Integer, Hash)>] NotificationSubscriptionDto data, response status code and response headers
    def api_v2_notification_subscriptions_id_patch_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_patch ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_patch"
      end
      # resource path
      local_var_path = '/api/v2/notificationSubscriptions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_notification_subscription_command'])

      # return_type
      return_type = opts[:debug_return_type] || 'NotificationSubscriptionDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"NotificationSubscriptionsApi.api_v2_notification_subscriptions_id_patch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationSubscriptionsApi#api_v2_notification_subscriptions_id_patch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Subscribe to events
    # @param [Hash] opts the optional parameters
    # @option opts [CreateNotificationSubscriptionCommand] :create_notification_subscription_command 
    # @return [NotificationSubscriptionDto]
    def api_v2_notification_subscriptions_post(opts = {})
      data, _status_code, _headers = api_v2_notification_subscriptions_post_with_http_info(opts)
      data
    end

    # Subscribe to events
    # @param [Hash] opts the optional parameters
    # @option opts [CreateNotificationSubscriptionCommand] :create_notification_subscription_command 
    # @return [Array<(NotificationSubscriptionDto, Integer, Hash)>] NotificationSubscriptionDto data, response status code and response headers
    def api_v2_notification_subscriptions_post_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationSubscriptionsApi.api_v2_notification_subscriptions_post ...'
      end
      # resource path
      local_var_path = '/api/v2/notificationSubscriptions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_notification_subscription_command'])

      # return_type
      return_type = opts[:debug_return_type] || 'NotificationSubscriptionDto'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"NotificationSubscriptionsApi.api_v2_notification_subscriptions_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationSubscriptionsApi#api_v2_notification_subscriptions_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def api_v2_notification_subscriptions_user_id_tenant_tenant_id_get(id, opts = {})
      api_v2_notification_subscriptions_user_id_tenant_tenant_id_get_with_http_info(id, opts)
      nil
    end

    # @param id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def api_v2_notification_subscriptions_user_id_tenant_tenant_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationSubscriptionsApi.api_v2_notification_subscriptions_user_id_tenant_tenant_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationSubscriptionsApi.api_v2_notification_subscriptions_user_id_tenant_tenant_id_get"
      end
      # resource path
      local_var_path = '/api/v2/notificationSubscriptions/user/{id}/tenant/{tenantId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['oauth2']

      new_options = opts.merge(
        :operation => :"NotificationSubscriptionsApi.api_v2_notification_subscriptions_user_id_tenant_tenant_id_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationSubscriptionsApi#api_v2_notification_subscriptions_user_id_tenant_tenant_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
