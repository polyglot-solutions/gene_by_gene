=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module GeneByGene
  class PID
    attr_accessor :set_id

    attr_accessor :external_patient_id

    attr_accessor :internal_patient_ids

    attr_accessor :alternate_patient_id

    attr_accessor :patient_names

    attr_accessor :mothers_maiden_name

    attr_accessor :date_of_birth

    attr_accessor :sex

    attr_accessor :patient_alias

    attr_accessor :race

    attr_accessor :patient_addresses

    attr_accessor :county_code

    attr_accessor :home_phone_numbers

    attr_accessor :business_phone_numbers

    attr_accessor :primary_language

    attr_accessor :marital_status

    attr_accessor :religion

    attr_accessor :patient_account_number

    attr_accessor :ssn_number

    attr_accessor :drivers_license_number

    attr_accessor :mothers_identifiers

    attr_accessor :ethnic_group

    attr_accessor :birth_place

    attr_accessor :multiple_birth_indicator

    attr_accessor :birth_order

    attr_accessor :citizenships

    attr_accessor :veterans_military_status

    attr_accessor :nationality_code

    attr_accessor :patient_death_date_and_time

    attr_accessor :patient_death_indicator

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'set_id' => :'setId',
        :'external_patient_id' => :'externalPatientId',
        :'internal_patient_ids' => :'internalPatientIds',
        :'alternate_patient_id' => :'alternatePatientId',
        :'patient_names' => :'patientNames',
        :'mothers_maiden_name' => :'mothersMaidenName',
        :'date_of_birth' => :'dateOfBirth',
        :'sex' => :'sex',
        :'patient_alias' => :'patientAlias',
        :'race' => :'race',
        :'patient_addresses' => :'patientAddresses',
        :'county_code' => :'countyCode',
        :'home_phone_numbers' => :'homePhoneNumbers',
        :'business_phone_numbers' => :'businessPhoneNumbers',
        :'primary_language' => :'primaryLanguage',
        :'marital_status' => :'maritalStatus',
        :'religion' => :'religion',
        :'patient_account_number' => :'patientAccountNumber',
        :'ssn_number' => :'ssnNumber',
        :'drivers_license_number' => :'driversLicenseNumber',
        :'mothers_identifiers' => :'mothersIdentifiers',
        :'ethnic_group' => :'ethnicGroup',
        :'birth_place' => :'birthPlace',
        :'multiple_birth_indicator' => :'multipleBirthIndicator',
        :'birth_order' => :'birthOrder',
        :'citizenships' => :'citizenships',
        :'veterans_military_status' => :'veteransMilitaryStatus',
        :'nationality_code' => :'nationalityCode',
        :'patient_death_date_and_time' => :'patientDeathDateAndTime',
        :'patient_death_indicator' => :'patientDeathIndicator'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'set_id' => :'Integer',
        :'external_patient_id' => :'CX',
        :'internal_patient_ids' => :'Array<CX>',
        :'alternate_patient_id' => :'String',
        :'patient_names' => :'Array<XPN>',
        :'mothers_maiden_name' => :'XPN',
        :'date_of_birth' => :'Time',
        :'sex' => :'String',
        :'patient_alias' => :'XPN',
        :'race' => :'String',
        :'patient_addresses' => :'Array<XAD>',
        :'county_code' => :'String',
        :'home_phone_numbers' => :'Array<XTN>',
        :'business_phone_numbers' => :'Array<XTN>',
        :'primary_language' => :'CE',
        :'marital_status' => :'String',
        :'religion' => :'String',
        :'patient_account_number' => :'String',
        :'ssn_number' => :'String',
        :'drivers_license_number' => :'String',
        :'mothers_identifiers' => :'Array<String>',
        :'ethnic_group' => :'String',
        :'birth_place' => :'String',
        :'multiple_birth_indicator' => :'String',
        :'birth_order' => :'Integer',
        :'citizenships' => :'Array<String>',
        :'veterans_military_status' => :'String',
        :'nationality_code' => :'CE',
        :'patient_death_date_and_time' => :'Time',
        :'patient_death_indicator' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'internal_patient_ids',
        :'alternate_patient_id',
        :'patient_names',
        :'date_of_birth',
        :'sex',
        :'race',
        :'patient_addresses',
        :'county_code',
        :'home_phone_numbers',
        :'business_phone_numbers',
        :'marital_status',
        :'religion',
        :'patient_account_number',
        :'ssn_number',
        :'drivers_license_number',
        :'mothers_identifiers',
        :'ethnic_group',
        :'birth_place',
        :'multiple_birth_indicator',
        :'birth_order',
        :'citizenships',
        :'veterans_military_status',
        :'patient_death_date_and_time',
        :'patient_death_indicator'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GeneByGene::PID` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GeneByGene::PID`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'set_id')
        self.set_id = attributes[:'set_id']
      end

      if attributes.key?(:'external_patient_id')
        self.external_patient_id = attributes[:'external_patient_id']
      end

      if attributes.key?(:'internal_patient_ids')
        if (value = attributes[:'internal_patient_ids']).is_a?(Array)
          self.internal_patient_ids = value
        end
      end

      if attributes.key?(:'alternate_patient_id')
        self.alternate_patient_id = attributes[:'alternate_patient_id']
      end

      if attributes.key?(:'patient_names')
        if (value = attributes[:'patient_names']).is_a?(Array)
          self.patient_names = value
        end
      end

      if attributes.key?(:'mothers_maiden_name')
        self.mothers_maiden_name = attributes[:'mothers_maiden_name']
      end

      if attributes.key?(:'date_of_birth')
        self.date_of_birth = attributes[:'date_of_birth']
      end

      if attributes.key?(:'sex')
        self.sex = attributes[:'sex']
      end

      if attributes.key?(:'patient_alias')
        self.patient_alias = attributes[:'patient_alias']
      end

      if attributes.key?(:'race')
        self.race = attributes[:'race']
      end

      if attributes.key?(:'patient_addresses')
        if (value = attributes[:'patient_addresses']).is_a?(Array)
          self.patient_addresses = value
        end
      end

      if attributes.key?(:'county_code')
        self.county_code = attributes[:'county_code']
      end

      if attributes.key?(:'home_phone_numbers')
        if (value = attributes[:'home_phone_numbers']).is_a?(Array)
          self.home_phone_numbers = value
        end
      end

      if attributes.key?(:'business_phone_numbers')
        if (value = attributes[:'business_phone_numbers']).is_a?(Array)
          self.business_phone_numbers = value
        end
      end

      if attributes.key?(:'primary_language')
        self.primary_language = attributes[:'primary_language']
      end

      if attributes.key?(:'marital_status')
        self.marital_status = attributes[:'marital_status']
      end

      if attributes.key?(:'religion')
        self.religion = attributes[:'religion']
      end

      if attributes.key?(:'patient_account_number')
        self.patient_account_number = attributes[:'patient_account_number']
      end

      if attributes.key?(:'ssn_number')
        self.ssn_number = attributes[:'ssn_number']
      end

      if attributes.key?(:'drivers_license_number')
        self.drivers_license_number = attributes[:'drivers_license_number']
      end

      if attributes.key?(:'mothers_identifiers')
        if (value = attributes[:'mothers_identifiers']).is_a?(Array)
          self.mothers_identifiers = value
        end
      end

      if attributes.key?(:'ethnic_group')
        self.ethnic_group = attributes[:'ethnic_group']
      end

      if attributes.key?(:'birth_place')
        self.birth_place = attributes[:'birth_place']
      end

      if attributes.key?(:'multiple_birth_indicator')
        self.multiple_birth_indicator = attributes[:'multiple_birth_indicator']
      end

      if attributes.key?(:'birth_order')
        self.birth_order = attributes[:'birth_order']
      end

      if attributes.key?(:'citizenships')
        if (value = attributes[:'citizenships']).is_a?(Array)
          self.citizenships = value
        end
      end

      if attributes.key?(:'veterans_military_status')
        self.veterans_military_status = attributes[:'veterans_military_status']
      end

      if attributes.key?(:'nationality_code')
        self.nationality_code = attributes[:'nationality_code']
      end

      if attributes.key?(:'patient_death_date_and_time')
        self.patient_death_date_and_time = attributes[:'patient_death_date_and_time']
      end

      if attributes.key?(:'patient_death_indicator')
        self.patient_death_indicator = attributes[:'patient_death_indicator']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          set_id == o.set_id &&
          external_patient_id == o.external_patient_id &&
          internal_patient_ids == o.internal_patient_ids &&
          alternate_patient_id == o.alternate_patient_id &&
          patient_names == o.patient_names &&
          mothers_maiden_name == o.mothers_maiden_name &&
          date_of_birth == o.date_of_birth &&
          sex == o.sex &&
          patient_alias == o.patient_alias &&
          race == o.race &&
          patient_addresses == o.patient_addresses &&
          county_code == o.county_code &&
          home_phone_numbers == o.home_phone_numbers &&
          business_phone_numbers == o.business_phone_numbers &&
          primary_language == o.primary_language &&
          marital_status == o.marital_status &&
          religion == o.religion &&
          patient_account_number == o.patient_account_number &&
          ssn_number == o.ssn_number &&
          drivers_license_number == o.drivers_license_number &&
          mothers_identifiers == o.mothers_identifiers &&
          ethnic_group == o.ethnic_group &&
          birth_place == o.birth_place &&
          multiple_birth_indicator == o.multiple_birth_indicator &&
          birth_order == o.birth_order &&
          citizenships == o.citizenships &&
          veterans_military_status == o.veterans_military_status &&
          nationality_code == o.nationality_code &&
          patient_death_date_and_time == o.patient_death_date_and_time &&
          patient_death_indicator == o.patient_death_indicator
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [set_id, external_patient_id, internal_patient_ids, alternate_patient_id, patient_names, mothers_maiden_name, date_of_birth, sex, patient_alias, race, patient_addresses, county_code, home_phone_numbers, business_phone_numbers, primary_language, marital_status, religion, patient_account_number, ssn_number, drivers_license_number, mothers_identifiers, ethnic_group, birth_place, multiple_birth_indicator, birth_order, citizenships, veterans_military_status, nationality_code, patient_death_date_and_time, patient_death_indicator].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GeneByGene.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
