=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module GeneByGene
  class IN1
    attr_accessor :set_id

    attr_accessor :insurance_plan_id

    attr_accessor :insurance_company_ids

    attr_accessor :insurance_company_names

    attr_accessor :insurance_company_addresses

    attr_accessor :insurance_company_contact_persons

    attr_accessor :insurance_company_phone_numbers

    attr_accessor :group_number

    attr_accessor :group_names

    attr_accessor :insureds_group_employer_id

    attr_accessor :insureds_group_employer_names

    attr_accessor :plan_effective_date

    attr_accessor :plan_expiration_date

    attr_accessor :authorization_information

    attr_accessor :plan_type

    attr_accessor :names_of_insured

    attr_accessor :insureds_relationship_to_patient

    attr_accessor :insureds_date_of_birth

    attr_accessor :insureds_addresses

    attr_accessor :assignment_of_benefits

    attr_accessor :coordination_of_benefits

    attr_accessor :coordination_of_benefits_priority

    attr_accessor :notice_of_admission_code

    attr_accessor :notice_of_admission_date

    attr_accessor :report_of_eigibility_code

    attr_accessor :report_of_eigibility_date

    attr_accessor :release_information_code

    attr_accessor :pre_admit_cert

    attr_accessor :verification_date_time

    attr_accessor :verification_by

    attr_accessor :type_of_agreement_code

    attr_accessor :billing_status

    attr_accessor :lifetime_reserve_days

    attr_accessor :delay_before_lifetime_reserve_days

    attr_accessor :company_plan_code

    attr_accessor :policy_number

    attr_accessor :policy_deductible

    attr_accessor :policy_limit_amount

    attr_accessor :policy_limit_days

    attr_accessor :room_rate_semi_private

    attr_accessor :room_rate_private

    attr_accessor :insured_s_employment_status

    attr_accessor :insureds_sex

    attr_accessor :insureds_employer_addresses

    attr_accessor :verification_status

    attr_accessor :prior_insurance_plan_id

    attr_accessor :coverage_type

    attr_accessor :handicap

    attr_accessor :insureds_id_numbers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'set_id' => :'setId',
        :'insurance_plan_id' => :'insurancePlanId',
        :'insurance_company_ids' => :'insuranceCompanyIds',
        :'insurance_company_names' => :'insuranceCompanyNames',
        :'insurance_company_addresses' => :'insuranceCompanyAddresses',
        :'insurance_company_contact_persons' => :'insuranceCompanyContactPersons',
        :'insurance_company_phone_numbers' => :'insuranceCompanyPhoneNumbers',
        :'group_number' => :'groupNumber',
        :'group_names' => :'groupNames',
        :'insureds_group_employer_id' => :'insuredsGroupEmployerId',
        :'insureds_group_employer_names' => :'insuredsGroupEmployerNames',
        :'plan_effective_date' => :'planEffectiveDate',
        :'plan_expiration_date' => :'planExpirationDate',
        :'authorization_information' => :'authorizationInformation',
        :'plan_type' => :'planType',
        :'names_of_insured' => :'namesOfInsured',
        :'insureds_relationship_to_patient' => :'insuredsRelationshipToPatient',
        :'insureds_date_of_birth' => :'insuredsDateOfBirth',
        :'insureds_addresses' => :'insuredsAddresses',
        :'assignment_of_benefits' => :'assignmentOfBenefits',
        :'coordination_of_benefits' => :'coordinationOfBenefits',
        :'coordination_of_benefits_priority' => :'coordinationOfBenefitsPriority',
        :'notice_of_admission_code' => :'noticeOfAdmissionCode',
        :'notice_of_admission_date' => :'noticeOfAdmissionDate',
        :'report_of_eigibility_code' => :'reportOfEigibilityCode',
        :'report_of_eigibility_date' => :'reportOfEigibilityDate',
        :'release_information_code' => :'releaseInformationCode',
        :'pre_admit_cert' => :'preAdmitCert',
        :'verification_date_time' => :'verificationDateTime',
        :'verification_by' => :'verificationBy',
        :'type_of_agreement_code' => :'typeOfAgreementCode',
        :'billing_status' => :'billingStatus',
        :'lifetime_reserve_days' => :'lifetimeReserveDays',
        :'delay_before_lifetime_reserve_days' => :'delayBeforeLifetimeReserveDays',
        :'company_plan_code' => :'companyPlanCode',
        :'policy_number' => :'policyNumber',
        :'policy_deductible' => :'policyDeductible',
        :'policy_limit_amount' => :'policyLimitAmount',
        :'policy_limit_days' => :'policyLimitDays',
        :'room_rate_semi_private' => :'roomRateSemiPrivate',
        :'room_rate_private' => :'roomRatePrivate',
        :'insured_s_employment_status' => :'insuredSEmploymentStatus',
        :'insureds_sex' => :'insuredsSex',
        :'insureds_employer_addresses' => :'insuredsEmployerAddresses',
        :'verification_status' => :'verificationStatus',
        :'prior_insurance_plan_id' => :'priorInsurancePlanId',
        :'coverage_type' => :'coverageType',
        :'handicap' => :'handicap',
        :'insureds_id_numbers' => :'insuredsIdNumbers'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'set_id' => :'Integer',
        :'insurance_plan_id' => :'CE',
        :'insurance_company_ids' => :'Array<String>',
        :'insurance_company_names' => :'Array<XON>',
        :'insurance_company_addresses' => :'Array<XAD>',
        :'insurance_company_contact_persons' => :'Array<XPN>',
        :'insurance_company_phone_numbers' => :'Array<XTN>',
        :'group_number' => :'String',
        :'group_names' => :'Array<XON>',
        :'insureds_group_employer_id' => :'String',
        :'insureds_group_employer_names' => :'Array<XON>',
        :'plan_effective_date' => :'Time',
        :'plan_expiration_date' => :'Time',
        :'authorization_information' => :'String',
        :'plan_type' => :'String',
        :'names_of_insured' => :'Array<XPN>',
        :'insureds_relationship_to_patient' => :'String',
        :'insureds_date_of_birth' => :'Time',
        :'insureds_addresses' => :'Array<XAD>',
        :'assignment_of_benefits' => :'String',
        :'coordination_of_benefits' => :'String',
        :'coordination_of_benefits_priority' => :'String',
        :'notice_of_admission_code' => :'String',
        :'notice_of_admission_date' => :'Time',
        :'report_of_eigibility_code' => :'String',
        :'report_of_eigibility_date' => :'Time',
        :'release_information_code' => :'String',
        :'pre_admit_cert' => :'String',
        :'verification_date_time' => :'Time',
        :'verification_by' => :'XPN',
        :'type_of_agreement_code' => :'String',
        :'billing_status' => :'String',
        :'lifetime_reserve_days' => :'Integer',
        :'delay_before_lifetime_reserve_days' => :'Integer',
        :'company_plan_code' => :'String',
        :'policy_number' => :'String',
        :'policy_deductible' => :'String',
        :'policy_limit_amount' => :'String',
        :'policy_limit_days' => :'Integer',
        :'room_rate_semi_private' => :'String',
        :'room_rate_private' => :'String',
        :'insured_s_employment_status' => :'CE',
        :'insureds_sex' => :'String',
        :'insureds_employer_addresses' => :'Array<XAD>',
        :'verification_status' => :'String',
        :'prior_insurance_plan_id' => :'String',
        :'coverage_type' => :'String',
        :'handicap' => :'String',
        :'insureds_id_numbers' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'insurance_company_ids',
        :'insurance_company_names',
        :'insurance_company_addresses',
        :'insurance_company_contact_persons',
        :'insurance_company_phone_numbers',
        :'group_number',
        :'group_names',
        :'insureds_group_employer_id',
        :'insureds_group_employer_names',
        :'plan_effective_date',
        :'plan_expiration_date',
        :'authorization_information',
        :'plan_type',
        :'names_of_insured',
        :'insureds_relationship_to_patient',
        :'insureds_date_of_birth',
        :'insureds_addresses',
        :'assignment_of_benefits',
        :'coordination_of_benefits',
        :'coordination_of_benefits_priority',
        :'notice_of_admission_code',
        :'notice_of_admission_date',
        :'report_of_eigibility_code',
        :'report_of_eigibility_date',
        :'release_information_code',
        :'pre_admit_cert',
        :'verification_date_time',
        :'type_of_agreement_code',
        :'billing_status',
        :'lifetime_reserve_days',
        :'delay_before_lifetime_reserve_days',
        :'company_plan_code',
        :'policy_number',
        :'policy_deductible',
        :'policy_limit_amount',
        :'policy_limit_days',
        :'room_rate_semi_private',
        :'room_rate_private',
        :'insureds_sex',
        :'insureds_employer_addresses',
        :'verification_status',
        :'prior_insurance_plan_id',
        :'coverage_type',
        :'handicap',
        :'insureds_id_numbers'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GeneByGene::IN1` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GeneByGene::IN1`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'set_id')
        self.set_id = attributes[:'set_id']
      end

      if attributes.key?(:'insurance_plan_id')
        self.insurance_plan_id = attributes[:'insurance_plan_id']
      end

      if attributes.key?(:'insurance_company_ids')
        if (value = attributes[:'insurance_company_ids']).is_a?(Array)
          self.insurance_company_ids = value
        end
      end

      if attributes.key?(:'insurance_company_names')
        if (value = attributes[:'insurance_company_names']).is_a?(Array)
          self.insurance_company_names = value
        end
      end

      if attributes.key?(:'insurance_company_addresses')
        if (value = attributes[:'insurance_company_addresses']).is_a?(Array)
          self.insurance_company_addresses = value
        end
      end

      if attributes.key?(:'insurance_company_contact_persons')
        if (value = attributes[:'insurance_company_contact_persons']).is_a?(Array)
          self.insurance_company_contact_persons = value
        end
      end

      if attributes.key?(:'insurance_company_phone_numbers')
        if (value = attributes[:'insurance_company_phone_numbers']).is_a?(Array)
          self.insurance_company_phone_numbers = value
        end
      end

      if attributes.key?(:'group_number')
        self.group_number = attributes[:'group_number']
      end

      if attributes.key?(:'group_names')
        if (value = attributes[:'group_names']).is_a?(Array)
          self.group_names = value
        end
      end

      if attributes.key?(:'insureds_group_employer_id')
        self.insureds_group_employer_id = attributes[:'insureds_group_employer_id']
      end

      if attributes.key?(:'insureds_group_employer_names')
        if (value = attributes[:'insureds_group_employer_names']).is_a?(Array)
          self.insureds_group_employer_names = value
        end
      end

      if attributes.key?(:'plan_effective_date')
        self.plan_effective_date = attributes[:'plan_effective_date']
      end

      if attributes.key?(:'plan_expiration_date')
        self.plan_expiration_date = attributes[:'plan_expiration_date']
      end

      if attributes.key?(:'authorization_information')
        self.authorization_information = attributes[:'authorization_information']
      end

      if attributes.key?(:'plan_type')
        self.plan_type = attributes[:'plan_type']
      end

      if attributes.key?(:'names_of_insured')
        if (value = attributes[:'names_of_insured']).is_a?(Array)
          self.names_of_insured = value
        end
      end

      if attributes.key?(:'insureds_relationship_to_patient')
        self.insureds_relationship_to_patient = attributes[:'insureds_relationship_to_patient']
      end

      if attributes.key?(:'insureds_date_of_birth')
        self.insureds_date_of_birth = attributes[:'insureds_date_of_birth']
      end

      if attributes.key?(:'insureds_addresses')
        if (value = attributes[:'insureds_addresses']).is_a?(Array)
          self.insureds_addresses = value
        end
      end

      if attributes.key?(:'assignment_of_benefits')
        self.assignment_of_benefits = attributes[:'assignment_of_benefits']
      end

      if attributes.key?(:'coordination_of_benefits')
        self.coordination_of_benefits = attributes[:'coordination_of_benefits']
      end

      if attributes.key?(:'coordination_of_benefits_priority')
        self.coordination_of_benefits_priority = attributes[:'coordination_of_benefits_priority']
      end

      if attributes.key?(:'notice_of_admission_code')
        self.notice_of_admission_code = attributes[:'notice_of_admission_code']
      end

      if attributes.key?(:'notice_of_admission_date')
        self.notice_of_admission_date = attributes[:'notice_of_admission_date']
      end

      if attributes.key?(:'report_of_eigibility_code')
        self.report_of_eigibility_code = attributes[:'report_of_eigibility_code']
      end

      if attributes.key?(:'report_of_eigibility_date')
        self.report_of_eigibility_date = attributes[:'report_of_eigibility_date']
      end

      if attributes.key?(:'release_information_code')
        self.release_information_code = attributes[:'release_information_code']
      end

      if attributes.key?(:'pre_admit_cert')
        self.pre_admit_cert = attributes[:'pre_admit_cert']
      end

      if attributes.key?(:'verification_date_time')
        self.verification_date_time = attributes[:'verification_date_time']
      end

      if attributes.key?(:'verification_by')
        self.verification_by = attributes[:'verification_by']
      end

      if attributes.key?(:'type_of_agreement_code')
        self.type_of_agreement_code = attributes[:'type_of_agreement_code']
      end

      if attributes.key?(:'billing_status')
        self.billing_status = attributes[:'billing_status']
      end

      if attributes.key?(:'lifetime_reserve_days')
        self.lifetime_reserve_days = attributes[:'lifetime_reserve_days']
      end

      if attributes.key?(:'delay_before_lifetime_reserve_days')
        self.delay_before_lifetime_reserve_days = attributes[:'delay_before_lifetime_reserve_days']
      end

      if attributes.key?(:'company_plan_code')
        self.company_plan_code = attributes[:'company_plan_code']
      end

      if attributes.key?(:'policy_number')
        self.policy_number = attributes[:'policy_number']
      end

      if attributes.key?(:'policy_deductible')
        self.policy_deductible = attributes[:'policy_deductible']
      end

      if attributes.key?(:'policy_limit_amount')
        self.policy_limit_amount = attributes[:'policy_limit_amount']
      end

      if attributes.key?(:'policy_limit_days')
        self.policy_limit_days = attributes[:'policy_limit_days']
      end

      if attributes.key?(:'room_rate_semi_private')
        self.room_rate_semi_private = attributes[:'room_rate_semi_private']
      end

      if attributes.key?(:'room_rate_private')
        self.room_rate_private = attributes[:'room_rate_private']
      end

      if attributes.key?(:'insured_s_employment_status')
        self.insured_s_employment_status = attributes[:'insured_s_employment_status']
      end

      if attributes.key?(:'insureds_sex')
        self.insureds_sex = attributes[:'insureds_sex']
      end

      if attributes.key?(:'insureds_employer_addresses')
        if (value = attributes[:'insureds_employer_addresses']).is_a?(Array)
          self.insureds_employer_addresses = value
        end
      end

      if attributes.key?(:'verification_status')
        self.verification_status = attributes[:'verification_status']
      end

      if attributes.key?(:'prior_insurance_plan_id')
        self.prior_insurance_plan_id = attributes[:'prior_insurance_plan_id']
      end

      if attributes.key?(:'coverage_type')
        self.coverage_type = attributes[:'coverage_type']
      end

      if attributes.key?(:'handicap')
        self.handicap = attributes[:'handicap']
      end

      if attributes.key?(:'insureds_id_numbers')
        if (value = attributes[:'insureds_id_numbers']).is_a?(Array)
          self.insureds_id_numbers = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          set_id == o.set_id &&
          insurance_plan_id == o.insurance_plan_id &&
          insurance_company_ids == o.insurance_company_ids &&
          insurance_company_names == o.insurance_company_names &&
          insurance_company_addresses == o.insurance_company_addresses &&
          insurance_company_contact_persons == o.insurance_company_contact_persons &&
          insurance_company_phone_numbers == o.insurance_company_phone_numbers &&
          group_number == o.group_number &&
          group_names == o.group_names &&
          insureds_group_employer_id == o.insureds_group_employer_id &&
          insureds_group_employer_names == o.insureds_group_employer_names &&
          plan_effective_date == o.plan_effective_date &&
          plan_expiration_date == o.plan_expiration_date &&
          authorization_information == o.authorization_information &&
          plan_type == o.plan_type &&
          names_of_insured == o.names_of_insured &&
          insureds_relationship_to_patient == o.insureds_relationship_to_patient &&
          insureds_date_of_birth == o.insureds_date_of_birth &&
          insureds_addresses == o.insureds_addresses &&
          assignment_of_benefits == o.assignment_of_benefits &&
          coordination_of_benefits == o.coordination_of_benefits &&
          coordination_of_benefits_priority == o.coordination_of_benefits_priority &&
          notice_of_admission_code == o.notice_of_admission_code &&
          notice_of_admission_date == o.notice_of_admission_date &&
          report_of_eigibility_code == o.report_of_eigibility_code &&
          report_of_eigibility_date == o.report_of_eigibility_date &&
          release_information_code == o.release_information_code &&
          pre_admit_cert == o.pre_admit_cert &&
          verification_date_time == o.verification_date_time &&
          verification_by == o.verification_by &&
          type_of_agreement_code == o.type_of_agreement_code &&
          billing_status == o.billing_status &&
          lifetime_reserve_days == o.lifetime_reserve_days &&
          delay_before_lifetime_reserve_days == o.delay_before_lifetime_reserve_days &&
          company_plan_code == o.company_plan_code &&
          policy_number == o.policy_number &&
          policy_deductible == o.policy_deductible &&
          policy_limit_amount == o.policy_limit_amount &&
          policy_limit_days == o.policy_limit_days &&
          room_rate_semi_private == o.room_rate_semi_private &&
          room_rate_private == o.room_rate_private &&
          insured_s_employment_status == o.insured_s_employment_status &&
          insureds_sex == o.insureds_sex &&
          insureds_employer_addresses == o.insureds_employer_addresses &&
          verification_status == o.verification_status &&
          prior_insurance_plan_id == o.prior_insurance_plan_id &&
          coverage_type == o.coverage_type &&
          handicap == o.handicap &&
          insureds_id_numbers == o.insureds_id_numbers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [set_id, insurance_plan_id, insurance_company_ids, insurance_company_names, insurance_company_addresses, insurance_company_contact_persons, insurance_company_phone_numbers, group_number, group_names, insureds_group_employer_id, insureds_group_employer_names, plan_effective_date, plan_expiration_date, authorization_information, plan_type, names_of_insured, insureds_relationship_to_patient, insureds_date_of_birth, insureds_addresses, assignment_of_benefits, coordination_of_benefits, coordination_of_benefits_priority, notice_of_admission_code, notice_of_admission_date, report_of_eigibility_code, report_of_eigibility_date, release_information_code, pre_admit_cert, verification_date_time, verification_by, type_of_agreement_code, billing_status, lifetime_reserve_days, delay_before_lifetime_reserve_days, company_plan_code, policy_number, policy_deductible, policy_limit_amount, policy_limit_days, room_rate_semi_private, room_rate_private, insured_s_employment_status, insureds_sex, insureds_employer_addresses, verification_status, prior_insurance_plan_id, coverage_type, handicap, insureds_id_numbers].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GeneByGene.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
