=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module GeneByGene
  class PD1
    attr_accessor :living_dependencies

    attr_accessor :living_arrangement

    attr_accessor :patient_primary_facilities

    attr_accessor :patient_primary_care_provider_names_and_ids

    attr_accessor :student_indicator

    attr_accessor :handicap

    attr_accessor :living_will

    attr_accessor :organ_donor

    attr_accessor :separate_bill

    attr_accessor :duplicate_patient

    attr_accessor :publicity_indicator

    attr_accessor :protection_indicator

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'living_dependencies' => :'livingDependencies',
        :'living_arrangement' => :'livingArrangement',
        :'patient_primary_facilities' => :'patientPrimaryFacilities',
        :'patient_primary_care_provider_names_and_ids' => :'patientPrimaryCareProviderNamesAndIds',
        :'student_indicator' => :'studentIndicator',
        :'handicap' => :'handicap',
        :'living_will' => :'livingWill',
        :'organ_donor' => :'organDonor',
        :'separate_bill' => :'separateBill',
        :'duplicate_patient' => :'duplicatePatient',
        :'publicity_indicator' => :'publicityIndicator',
        :'protection_indicator' => :'protectionIndicator'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'living_dependencies' => :'Array<String>',
        :'living_arrangement' => :'String',
        :'patient_primary_facilities' => :'Array<XON>',
        :'patient_primary_care_provider_names_and_ids' => :'Array<XCN>',
        :'student_indicator' => :'String',
        :'handicap' => :'String',
        :'living_will' => :'String',
        :'organ_donor' => :'String',
        :'separate_bill' => :'String',
        :'duplicate_patient' => :'Array<String>',
        :'publicity_indicator' => :'CE',
        :'protection_indicator' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'living_dependencies',
        :'living_arrangement',
        :'patient_primary_facilities',
        :'patient_primary_care_provider_names_and_ids',
        :'student_indicator',
        :'handicap',
        :'living_will',
        :'organ_donor',
        :'separate_bill',
        :'duplicate_patient',
        :'protection_indicator'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GeneByGene::PD1` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GeneByGene::PD1`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'living_dependencies')
        if (value = attributes[:'living_dependencies']).is_a?(Array)
          self.living_dependencies = value
        end
      end

      if attributes.key?(:'living_arrangement')
        self.living_arrangement = attributes[:'living_arrangement']
      end

      if attributes.key?(:'patient_primary_facilities')
        if (value = attributes[:'patient_primary_facilities']).is_a?(Array)
          self.patient_primary_facilities = value
        end
      end

      if attributes.key?(:'patient_primary_care_provider_names_and_ids')
        if (value = attributes[:'patient_primary_care_provider_names_and_ids']).is_a?(Array)
          self.patient_primary_care_provider_names_and_ids = value
        end
      end

      if attributes.key?(:'student_indicator')
        self.student_indicator = attributes[:'student_indicator']
      end

      if attributes.key?(:'handicap')
        self.handicap = attributes[:'handicap']
      end

      if attributes.key?(:'living_will')
        self.living_will = attributes[:'living_will']
      end

      if attributes.key?(:'organ_donor')
        self.organ_donor = attributes[:'organ_donor']
      end

      if attributes.key?(:'separate_bill')
        self.separate_bill = attributes[:'separate_bill']
      end

      if attributes.key?(:'duplicate_patient')
        if (value = attributes[:'duplicate_patient']).is_a?(Array)
          self.duplicate_patient = value
        end
      end

      if attributes.key?(:'publicity_indicator')
        self.publicity_indicator = attributes[:'publicity_indicator']
      end

      if attributes.key?(:'protection_indicator')
        self.protection_indicator = attributes[:'protection_indicator']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          living_dependencies == o.living_dependencies &&
          living_arrangement == o.living_arrangement &&
          patient_primary_facilities == o.patient_primary_facilities &&
          patient_primary_care_provider_names_and_ids == o.patient_primary_care_provider_names_and_ids &&
          student_indicator == o.student_indicator &&
          handicap == o.handicap &&
          living_will == o.living_will &&
          organ_donor == o.organ_donor &&
          separate_bill == o.separate_bill &&
          duplicate_patient == o.duplicate_patient &&
          publicity_indicator == o.publicity_indicator &&
          protection_indicator == o.protection_indicator
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [living_dependencies, living_arrangement, patient_primary_facilities, patient_primary_care_provider_names_and_ids, student_indicator, handicap, living_will, organ_donor, separate_bill, duplicate_patient, publicity_indicator, protection_indicator].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GeneByGene.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
