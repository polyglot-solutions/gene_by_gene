=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module GeneByGene
  class MSH
    attr_accessor :field_separator

    attr_accessor :encoding_characters

    attr_accessor :sending_application

    attr_accessor :sending_facility

    attr_accessor :receiving_application

    attr_accessor :receiving_facility

    attr_accessor :date_time_of_message

    attr_accessor :security

    attr_accessor :message_type

    attr_accessor :message_control_id

    attr_accessor :processing_id

    attr_accessor :version_id

    attr_accessor :sequence_number

    attr_accessor :continuation_pointer

    attr_accessor :accept_acknowledgement_type

    attr_accessor :application_acknowledgement_type

    attr_accessor :country_code

    attr_accessor :character_set

    attr_accessor :principal_language_of_message

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'field_separator' => :'fieldSeparator',
        :'encoding_characters' => :'encodingCharacters',
        :'sending_application' => :'sendingApplication',
        :'sending_facility' => :'sendingFacility',
        :'receiving_application' => :'receivingApplication',
        :'receiving_facility' => :'receivingFacility',
        :'date_time_of_message' => :'dateTimeOfMessage',
        :'security' => :'security',
        :'message_type' => :'messageType',
        :'message_control_id' => :'messageControlId',
        :'processing_id' => :'processingId',
        :'version_id' => :'versionId',
        :'sequence_number' => :'sequenceNumber',
        :'continuation_pointer' => :'continuationPointer',
        :'accept_acknowledgement_type' => :'acceptAcknowledgementType',
        :'application_acknowledgement_type' => :'applicationAcknowledgementType',
        :'country_code' => :'countryCode',
        :'character_set' => :'characterSet',
        :'principal_language_of_message' => :'principalLanguageOfMessage'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'field_separator' => :'String',
        :'encoding_characters' => :'String',
        :'sending_application' => :'String',
        :'sending_facility' => :'String',
        :'receiving_application' => :'String',
        :'receiving_facility' => :'String',
        :'date_time_of_message' => :'Time',
        :'security' => :'String',
        :'message_type' => :'String',
        :'message_control_id' => :'String',
        :'processing_id' => :'String',
        :'version_id' => :'String',
        :'sequence_number' => :'String',
        :'continuation_pointer' => :'String',
        :'accept_acknowledgement_type' => :'String',
        :'application_acknowledgement_type' => :'String',
        :'country_code' => :'String',
        :'character_set' => :'String',
        :'principal_language_of_message' => :'CE'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'field_separator',
        :'encoding_characters',
        :'sending_application',
        :'sending_facility',
        :'receiving_application',
        :'receiving_facility',
        :'security',
        :'message_type',
        :'message_control_id',
        :'processing_id',
        :'version_id',
        :'sequence_number',
        :'continuation_pointer',
        :'accept_acknowledgement_type',
        :'application_acknowledgement_type',
        :'country_code',
        :'character_set',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GeneByGene::MSH` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GeneByGene::MSH`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'field_separator')
        self.field_separator = attributes[:'field_separator']
      end

      if attributes.key?(:'encoding_characters')
        self.encoding_characters = attributes[:'encoding_characters']
      end

      if attributes.key?(:'sending_application')
        self.sending_application = attributes[:'sending_application']
      end

      if attributes.key?(:'sending_facility')
        self.sending_facility = attributes[:'sending_facility']
      end

      if attributes.key?(:'receiving_application')
        self.receiving_application = attributes[:'receiving_application']
      end

      if attributes.key?(:'receiving_facility')
        self.receiving_facility = attributes[:'receiving_facility']
      end

      if attributes.key?(:'date_time_of_message')
        self.date_time_of_message = attributes[:'date_time_of_message']
      end

      if attributes.key?(:'security')
        self.security = attributes[:'security']
      end

      if attributes.key?(:'message_type')
        self.message_type = attributes[:'message_type']
      end

      if attributes.key?(:'message_control_id')
        self.message_control_id = attributes[:'message_control_id']
      end

      if attributes.key?(:'processing_id')
        self.processing_id = attributes[:'processing_id']
      end

      if attributes.key?(:'version_id')
        self.version_id = attributes[:'version_id']
      end

      if attributes.key?(:'sequence_number')
        self.sequence_number = attributes[:'sequence_number']
      end

      if attributes.key?(:'continuation_pointer')
        self.continuation_pointer = attributes[:'continuation_pointer']
      end

      if attributes.key?(:'accept_acknowledgement_type')
        self.accept_acknowledgement_type = attributes[:'accept_acknowledgement_type']
      end

      if attributes.key?(:'application_acknowledgement_type')
        self.application_acknowledgement_type = attributes[:'application_acknowledgement_type']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'character_set')
        self.character_set = attributes[:'character_set']
      end

      if attributes.key?(:'principal_language_of_message')
        self.principal_language_of_message = attributes[:'principal_language_of_message']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          field_separator == o.field_separator &&
          encoding_characters == o.encoding_characters &&
          sending_application == o.sending_application &&
          sending_facility == o.sending_facility &&
          receiving_application == o.receiving_application &&
          receiving_facility == o.receiving_facility &&
          date_time_of_message == o.date_time_of_message &&
          security == o.security &&
          message_type == o.message_type &&
          message_control_id == o.message_control_id &&
          processing_id == o.processing_id &&
          version_id == o.version_id &&
          sequence_number == o.sequence_number &&
          continuation_pointer == o.continuation_pointer &&
          accept_acknowledgement_type == o.accept_acknowledgement_type &&
          application_acknowledgement_type == o.application_acknowledgement_type &&
          country_code == o.country_code &&
          character_set == o.character_set &&
          principal_language_of_message == o.principal_language_of_message
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [field_separator, encoding_characters, sending_application, sending_facility, receiving_application, receiving_facility, date_time_of_message, security, message_type, message_control_id, processing_id, version_id, sequence_number, continuation_pointer, accept_acknowledgement_type, application_acknowledgement_type, country_code, character_set, principal_language_of_message].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GeneByGene.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
