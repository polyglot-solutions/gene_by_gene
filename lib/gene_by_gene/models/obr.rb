=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module GeneByGene
  class OBR
    attr_accessor :set_id

    attr_accessor :placer_order_number

    attr_accessor :filler_order_number

    attr_accessor :universal_service_identifier

    attr_accessor :priority

    attr_accessor :requested_date_time

    attr_accessor :observation_date_time

    attr_accessor :observation_end_date_time

    attr_accessor :collection_volume

    attr_accessor :collector_identifiers

    attr_accessor :specimen_action_code

    attr_accessor :danger_code

    attr_accessor :relevant_clinical_information

    attr_accessor :specimen_received_date_time

    attr_accessor :specimen_source

    attr_accessor :ordering_providers

    attr_accessor :order_callback_phone_numbers

    attr_accessor :placer_field1

    attr_accessor :placer_field2

    attr_accessor :filler_field1

    attr_accessor :filler_field2

    attr_accessor :results_rpt_status_chng_date_time

    attr_accessor :charge_to_practice

    attr_accessor :diagnostic_service_section_id

    attr_accessor :result_status

    attr_accessor :parent_result

    attr_accessor :quantity_timings

    attr_accessor :result_copies_to

    attr_accessor :parent_number

    attr_accessor :transportation_mode

    attr_accessor :reasons_for_study

    attr_accessor :principal_result_interpreter

    attr_accessor :assistant_result_interpreters

    attr_accessor :technicians

    attr_accessor :transcriptionists

    attr_accessor :scheduled_date_time

    attr_accessor :number_of_sample_containers

    attr_accessor :transport_logistics_of_collected_sample

    attr_accessor :collectors_comments

    attr_accessor :transport_arrangement_responsibility

    attr_accessor :transport_arranged

    attr_accessor :escort_required

    attr_accessor :planned_patient_transport_comments

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'set_id' => :'setId',
        :'placer_order_number' => :'placerOrderNumber',
        :'filler_order_number' => :'fillerOrderNumber',
        :'universal_service_identifier' => :'universalServiceIdentifier',
        :'priority' => :'priority',
        :'requested_date_time' => :'requestedDateTime',
        :'observation_date_time' => :'observationDateTime',
        :'observation_end_date_time' => :'observationEndDateTime',
        :'collection_volume' => :'collectionVolume',
        :'collector_identifiers' => :'collectorIdentifiers',
        :'specimen_action_code' => :'specimenActionCode',
        :'danger_code' => :'dangerCode',
        :'relevant_clinical_information' => :'relevantClinicalInformation',
        :'specimen_received_date_time' => :'specimenReceivedDateTime',
        :'specimen_source' => :'specimenSource',
        :'ordering_providers' => :'orderingProviders',
        :'order_callback_phone_numbers' => :'orderCallbackPhoneNumbers',
        :'placer_field1' => :'placerField1',
        :'placer_field2' => :'placerField2',
        :'filler_field1' => :'fillerField1',
        :'filler_field2' => :'fillerField2',
        :'results_rpt_status_chng_date_time' => :'resultsRptStatusChngDateTime',
        :'charge_to_practice' => :'chargeToPractice',
        :'diagnostic_service_section_id' => :'diagnosticServiceSectionID',
        :'result_status' => :'resultStatus',
        :'parent_result' => :'parentResult',
        :'quantity_timings' => :'quantityTimings',
        :'result_copies_to' => :'resultCopiesTo',
        :'parent_number' => :'parentNumber',
        :'transportation_mode' => :'transportationMode',
        :'reasons_for_study' => :'reasonsForStudy',
        :'principal_result_interpreter' => :'principalResultInterpreter',
        :'assistant_result_interpreters' => :'assistantResultInterpreters',
        :'technicians' => :'technicians',
        :'transcriptionists' => :'transcriptionists',
        :'scheduled_date_time' => :'scheduledDateTime',
        :'number_of_sample_containers' => :'numberOfSampleContainers',
        :'transport_logistics_of_collected_sample' => :'transportLogisticsOfCollectedSample',
        :'collectors_comments' => :'collectorsComments',
        :'transport_arrangement_responsibility' => :'transportArrangementResponsibility',
        :'transport_arranged' => :'transportArranged',
        :'escort_required' => :'escortRequired',
        :'planned_patient_transport_comments' => :'plannedPatientTransportComments'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'set_id' => :'Integer',
        :'placer_order_number' => :'String',
        :'filler_order_number' => :'String',
        :'universal_service_identifier' => :'CE',
        :'priority' => :'String',
        :'requested_date_time' => :'Time',
        :'observation_date_time' => :'Time',
        :'observation_end_date_time' => :'Time',
        :'collection_volume' => :'CQ',
        :'collector_identifiers' => :'Array<XCN>',
        :'specimen_action_code' => :'String',
        :'danger_code' => :'CE',
        :'relevant_clinical_information' => :'String',
        :'specimen_received_date_time' => :'Time',
        :'specimen_source' => :'String',
        :'ordering_providers' => :'Array<XCN>',
        :'order_callback_phone_numbers' => :'Array<XTN>',
        :'placer_field1' => :'String',
        :'placer_field2' => :'String',
        :'filler_field1' => :'String',
        :'filler_field2' => :'String',
        :'results_rpt_status_chng_date_time' => :'Time',
        :'charge_to_practice' => :'String',
        :'diagnostic_service_section_id' => :'String',
        :'result_status' => :'String',
        :'parent_result' => :'String',
        :'quantity_timings' => :'Array<String>',
        :'result_copies_to' => :'Array<XCN>',
        :'parent_number' => :'String',
        :'transportation_mode' => :'String',
        :'reasons_for_study' => :'Array<CE>',
        :'principal_result_interpreter' => :'String',
        :'assistant_result_interpreters' => :'Array<String>',
        :'technicians' => :'Array<String>',
        :'transcriptionists' => :'Array<String>',
        :'scheduled_date_time' => :'Time',
        :'number_of_sample_containers' => :'Integer',
        :'transport_logistics_of_collected_sample' => :'Array<CE>',
        :'collectors_comments' => :'Array<CE>',
        :'transport_arrangement_responsibility' => :'CE',
        :'transport_arranged' => :'String',
        :'escort_required' => :'String',
        :'planned_patient_transport_comments' => :'Array<CE>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'placer_order_number',
        :'filler_order_number',
        :'priority',
        :'requested_date_time',
        :'observation_date_time',
        :'observation_end_date_time',
        :'collector_identifiers',
        :'specimen_action_code',
        :'relevant_clinical_information',
        :'specimen_received_date_time',
        :'specimen_source',
        :'ordering_providers',
        :'order_callback_phone_numbers',
        :'placer_field1',
        :'placer_field2',
        :'filler_field1',
        :'filler_field2',
        :'results_rpt_status_chng_date_time',
        :'charge_to_practice',
        :'diagnostic_service_section_id',
        :'result_status',
        :'parent_result',
        :'quantity_timings',
        :'result_copies_to',
        :'parent_number',
        :'transportation_mode',
        :'reasons_for_study',
        :'principal_result_interpreter',
        :'assistant_result_interpreters',
        :'technicians',
        :'transcriptionists',
        :'scheduled_date_time',
        :'number_of_sample_containers',
        :'transport_logistics_of_collected_sample',
        :'collectors_comments',
        :'transport_arranged',
        :'escort_required',
        :'planned_patient_transport_comments'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GeneByGene::OBR` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GeneByGene::OBR`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'set_id')
        self.set_id = attributes[:'set_id']
      end

      if attributes.key?(:'placer_order_number')
        self.placer_order_number = attributes[:'placer_order_number']
      end

      if attributes.key?(:'filler_order_number')
        self.filler_order_number = attributes[:'filler_order_number']
      end

      if attributes.key?(:'universal_service_identifier')
        self.universal_service_identifier = attributes[:'universal_service_identifier']
      end

      if attributes.key?(:'priority')
        self.priority = attributes[:'priority']
      end

      if attributes.key?(:'requested_date_time')
        self.requested_date_time = attributes[:'requested_date_time']
      end

      if attributes.key?(:'observation_date_time')
        self.observation_date_time = attributes[:'observation_date_time']
      end

      if attributes.key?(:'observation_end_date_time')
        self.observation_end_date_time = attributes[:'observation_end_date_time']
      end

      if attributes.key?(:'collection_volume')
        self.collection_volume = attributes[:'collection_volume']
      end

      if attributes.key?(:'collector_identifiers')
        if (value = attributes[:'collector_identifiers']).is_a?(Array)
          self.collector_identifiers = value
        end
      end

      if attributes.key?(:'specimen_action_code')
        self.specimen_action_code = attributes[:'specimen_action_code']
      end

      if attributes.key?(:'danger_code')
        self.danger_code = attributes[:'danger_code']
      end

      if attributes.key?(:'relevant_clinical_information')
        self.relevant_clinical_information = attributes[:'relevant_clinical_information']
      end

      if attributes.key?(:'specimen_received_date_time')
        self.specimen_received_date_time = attributes[:'specimen_received_date_time']
      end

      if attributes.key?(:'specimen_source')
        self.specimen_source = attributes[:'specimen_source']
      end

      if attributes.key?(:'ordering_providers')
        if (value = attributes[:'ordering_providers']).is_a?(Array)
          self.ordering_providers = value
        end
      end

      if attributes.key?(:'order_callback_phone_numbers')
        if (value = attributes[:'order_callback_phone_numbers']).is_a?(Array)
          self.order_callback_phone_numbers = value
        end
      end

      if attributes.key?(:'placer_field1')
        self.placer_field1 = attributes[:'placer_field1']
      end

      if attributes.key?(:'placer_field2')
        self.placer_field2 = attributes[:'placer_field2']
      end

      if attributes.key?(:'filler_field1')
        self.filler_field1 = attributes[:'filler_field1']
      end

      if attributes.key?(:'filler_field2')
        self.filler_field2 = attributes[:'filler_field2']
      end

      if attributes.key?(:'results_rpt_status_chng_date_time')
        self.results_rpt_status_chng_date_time = attributes[:'results_rpt_status_chng_date_time']
      end

      if attributes.key?(:'charge_to_practice')
        self.charge_to_practice = attributes[:'charge_to_practice']
      end

      if attributes.key?(:'diagnostic_service_section_id')
        self.diagnostic_service_section_id = attributes[:'diagnostic_service_section_id']
      end

      if attributes.key?(:'result_status')
        self.result_status = attributes[:'result_status']
      end

      if attributes.key?(:'parent_result')
        self.parent_result = attributes[:'parent_result']
      end

      if attributes.key?(:'quantity_timings')
        if (value = attributes[:'quantity_timings']).is_a?(Array)
          self.quantity_timings = value
        end
      end

      if attributes.key?(:'result_copies_to')
        if (value = attributes[:'result_copies_to']).is_a?(Array)
          self.result_copies_to = value
        end
      end

      if attributes.key?(:'parent_number')
        self.parent_number = attributes[:'parent_number']
      end

      if attributes.key?(:'transportation_mode')
        self.transportation_mode = attributes[:'transportation_mode']
      end

      if attributes.key?(:'reasons_for_study')
        if (value = attributes[:'reasons_for_study']).is_a?(Array)
          self.reasons_for_study = value
        end
      end

      if attributes.key?(:'principal_result_interpreter')
        self.principal_result_interpreter = attributes[:'principal_result_interpreter']
      end

      if attributes.key?(:'assistant_result_interpreters')
        if (value = attributes[:'assistant_result_interpreters']).is_a?(Array)
          self.assistant_result_interpreters = value
        end
      end

      if attributes.key?(:'technicians')
        if (value = attributes[:'technicians']).is_a?(Array)
          self.technicians = value
        end
      end

      if attributes.key?(:'transcriptionists')
        if (value = attributes[:'transcriptionists']).is_a?(Array)
          self.transcriptionists = value
        end
      end

      if attributes.key?(:'scheduled_date_time')
        self.scheduled_date_time = attributes[:'scheduled_date_time']
      end

      if attributes.key?(:'number_of_sample_containers')
        self.number_of_sample_containers = attributes[:'number_of_sample_containers']
      end

      if attributes.key?(:'transport_logistics_of_collected_sample')
        if (value = attributes[:'transport_logistics_of_collected_sample']).is_a?(Array)
          self.transport_logistics_of_collected_sample = value
        end
      end

      if attributes.key?(:'collectors_comments')
        if (value = attributes[:'collectors_comments']).is_a?(Array)
          self.collectors_comments = value
        end
      end

      if attributes.key?(:'transport_arrangement_responsibility')
        self.transport_arrangement_responsibility = attributes[:'transport_arrangement_responsibility']
      end

      if attributes.key?(:'transport_arranged')
        self.transport_arranged = attributes[:'transport_arranged']
      end

      if attributes.key?(:'escort_required')
        self.escort_required = attributes[:'escort_required']
      end

      if attributes.key?(:'planned_patient_transport_comments')
        if (value = attributes[:'planned_patient_transport_comments']).is_a?(Array)
          self.planned_patient_transport_comments = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          set_id == o.set_id &&
          placer_order_number == o.placer_order_number &&
          filler_order_number == o.filler_order_number &&
          universal_service_identifier == o.universal_service_identifier &&
          priority == o.priority &&
          requested_date_time == o.requested_date_time &&
          observation_date_time == o.observation_date_time &&
          observation_end_date_time == o.observation_end_date_time &&
          collection_volume == o.collection_volume &&
          collector_identifiers == o.collector_identifiers &&
          specimen_action_code == o.specimen_action_code &&
          danger_code == o.danger_code &&
          relevant_clinical_information == o.relevant_clinical_information &&
          specimen_received_date_time == o.specimen_received_date_time &&
          specimen_source == o.specimen_source &&
          ordering_providers == o.ordering_providers &&
          order_callback_phone_numbers == o.order_callback_phone_numbers &&
          placer_field1 == o.placer_field1 &&
          placer_field2 == o.placer_field2 &&
          filler_field1 == o.filler_field1 &&
          filler_field2 == o.filler_field2 &&
          results_rpt_status_chng_date_time == o.results_rpt_status_chng_date_time &&
          charge_to_practice == o.charge_to_practice &&
          diagnostic_service_section_id == o.diagnostic_service_section_id &&
          result_status == o.result_status &&
          parent_result == o.parent_result &&
          quantity_timings == o.quantity_timings &&
          result_copies_to == o.result_copies_to &&
          parent_number == o.parent_number &&
          transportation_mode == o.transportation_mode &&
          reasons_for_study == o.reasons_for_study &&
          principal_result_interpreter == o.principal_result_interpreter &&
          assistant_result_interpreters == o.assistant_result_interpreters &&
          technicians == o.technicians &&
          transcriptionists == o.transcriptionists &&
          scheduled_date_time == o.scheduled_date_time &&
          number_of_sample_containers == o.number_of_sample_containers &&
          transport_logistics_of_collected_sample == o.transport_logistics_of_collected_sample &&
          collectors_comments == o.collectors_comments &&
          transport_arrangement_responsibility == o.transport_arrangement_responsibility &&
          transport_arranged == o.transport_arranged &&
          escort_required == o.escort_required &&
          planned_patient_transport_comments == o.planned_patient_transport_comments
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [set_id, placer_order_number, filler_order_number, universal_service_identifier, priority, requested_date_time, observation_date_time, observation_end_date_time, collection_volume, collector_identifiers, specimen_action_code, danger_code, relevant_clinical_information, specimen_received_date_time, specimen_source, ordering_providers, order_callback_phone_numbers, placer_field1, placer_field2, filler_field1, filler_field2, results_rpt_status_chng_date_time, charge_to_practice, diagnostic_service_section_id, result_status, parent_result, quantity_timings, result_copies_to, parent_number, transportation_mode, reasons_for_study, principal_result_interpreter, assistant_result_interpreters, technicians, transcriptionists, scheduled_date_time, number_of_sample_containers, transport_logistics_of_collected_sample, collectors_comments, transport_arrangement_responsibility, transport_arranged, escort_required, planned_patient_transport_comments].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GeneByGene.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
