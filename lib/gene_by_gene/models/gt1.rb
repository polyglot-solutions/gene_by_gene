=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module GeneByGene
  class GT1
    attr_accessor :set_id

    attr_accessor :guarantor_numbers

    attr_accessor :guarantor_names

    attr_accessor :guarantor_spouse_names

    attr_accessor :guarantor_addresses

    attr_accessor :guarantor_home_phone_numbers

    attr_accessor :guarantor_business_phone_numbers

    attr_accessor :guarantor_date_time_of_birth

    attr_accessor :guarantor_sex

    attr_accessor :guarantor_type

    attr_accessor :guarantor_relationship

    attr_accessor :guarantor_ssn

    attr_accessor :guarantor_date_begin

    attr_accessor :guarantor_date_end

    attr_accessor :guarantor_priority

    attr_accessor :guarantor_employer_names

    attr_accessor :guarantor_employer_addresses

    attr_accessor :guarantor_employer_phone_numbers

    attr_accessor :guarantor_employee_id_numbers

    attr_accessor :guarantor_employment_status

    attr_accessor :guarantor_organizations

    attr_accessor :guarantor_billing_hold_flag

    attr_accessor :guarantor_credit_rating_code

    attr_accessor :guarantor_death_date_and_time

    attr_accessor :guarantor_death_flag

    attr_accessor :guarantor_charge_adjustment_code

    attr_accessor :guarantor_household_annual_income

    attr_accessor :guarantor_household_size

    attr_accessor :get_guarantor_employer_id_numbers

    attr_accessor :guarantor_marital_status_code

    attr_accessor :guarantor_hire_effective_date

    attr_accessor :employment_stop_date

    attr_accessor :living_dependency

    attr_accessor :ambulatory_status

    attr_accessor :citizenship

    attr_accessor :primary_language

    attr_accessor :living_arrangement

    attr_accessor :publicity_indicator

    attr_accessor :protection_indicator

    attr_accessor :student_indicator

    attr_accessor :religion

    attr_accessor :mothers_maiden_name

    attr_accessor :nationality_code

    attr_accessor :ethnic_group

    attr_accessor :contact_persons_names

    attr_accessor :contact_persons_telephone_numbers

    attr_accessor :contact_reason

    attr_accessor :contact_relationship_code

    attr_accessor :job_title

    attr_accessor :job_code_class

    attr_accessor :guarantor_employers_organization_name

    attr_accessor :handicap

    attr_accessor :job_status

    attr_accessor :guarantor_financial_class

    attr_accessor :guarantor_race

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'set_id' => :'setId',
        :'guarantor_numbers' => :'guarantorNumbers',
        :'guarantor_names' => :'guarantorNames',
        :'guarantor_spouse_names' => :'guarantorSpouseNames',
        :'guarantor_addresses' => :'guarantorAddresses',
        :'guarantor_home_phone_numbers' => :'guarantorHomePhoneNumbers',
        :'guarantor_business_phone_numbers' => :'guarantorBusinessPhoneNumbers',
        :'guarantor_date_time_of_birth' => :'guarantorDateTimeOfBirth',
        :'guarantor_sex' => :'guarantorSex',
        :'guarantor_type' => :'guarantorType',
        :'guarantor_relationship' => :'guarantorRelationship',
        :'guarantor_ssn' => :'guarantorSsn',
        :'guarantor_date_begin' => :'guarantorDateBegin',
        :'guarantor_date_end' => :'guarantorDateEnd',
        :'guarantor_priority' => :'guarantorPriority',
        :'guarantor_employer_names' => :'guarantorEmployerNames',
        :'guarantor_employer_addresses' => :'guarantorEmployerAddresses',
        :'guarantor_employer_phone_numbers' => :'guarantorEmployerPhoneNumbers',
        :'guarantor_employee_id_numbers' => :'guarantorEmployeeIdNumbers',
        :'guarantor_employment_status' => :'guarantorEmploymentStatus',
        :'guarantor_organizations' => :'guarantorOrganizations',
        :'guarantor_billing_hold_flag' => :'guarantorBillingHoldFlag',
        :'guarantor_credit_rating_code' => :'guarantorCreditRatingCode',
        :'guarantor_death_date_and_time' => :'guarantorDeathDateAndTime',
        :'guarantor_death_flag' => :'guarantorDeathFlag',
        :'guarantor_charge_adjustment_code' => :'guarantorChargeAdjustmentCode',
        :'guarantor_household_annual_income' => :'guarantorHouseholdAnnualIncome',
        :'guarantor_household_size' => :'guarantorHouseholdSize',
        :'get_guarantor_employer_id_numbers' => :'getGuarantorEmployerIdNumbers',
        :'guarantor_marital_status_code' => :'guarantorMaritalStatusCode',
        :'guarantor_hire_effective_date' => :'guarantorHireEffectiveDate',
        :'employment_stop_date' => :'employmentStopDate',
        :'living_dependency' => :'livingDependency',
        :'ambulatory_status' => :'ambulatoryStatus',
        :'citizenship' => :'citizenship',
        :'primary_language' => :'primaryLanguage',
        :'living_arrangement' => :'livingArrangement',
        :'publicity_indicator' => :'publicityIndicator',
        :'protection_indicator' => :'protectionIndicator',
        :'student_indicator' => :'studentIndicator',
        :'religion' => :'religion',
        :'mothers_maiden_name' => :'mothersMaidenName',
        :'nationality_code' => :'nationalityCode',
        :'ethnic_group' => :'ethnicGroup',
        :'contact_persons_names' => :'contactPersonsNames',
        :'contact_persons_telephone_numbers' => :'contactPersonsTelephoneNumbers',
        :'contact_reason' => :'contactReason',
        :'contact_relationship_code' => :'contactRelationshipCode',
        :'job_title' => :'jobTitle',
        :'job_code_class' => :'jobCodeClass',
        :'guarantor_employers_organization_name' => :'guarantorEmployersOrganizationName',
        :'handicap' => :'handicap',
        :'job_status' => :'jobStatus',
        :'guarantor_financial_class' => :'guarantorFinancialClass',
        :'guarantor_race' => :'guarantorRace'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'set_id' => :'Integer',
        :'guarantor_numbers' => :'Array<String>',
        :'guarantor_names' => :'Array<XPN>',
        :'guarantor_spouse_names' => :'Array<XPN>',
        :'guarantor_addresses' => :'Array<XAD>',
        :'guarantor_home_phone_numbers' => :'Array<XTN>',
        :'guarantor_business_phone_numbers' => :'Array<XTN>',
        :'guarantor_date_time_of_birth' => :'Time',
        :'guarantor_sex' => :'String',
        :'guarantor_type' => :'String',
        :'guarantor_relationship' => :'String',
        :'guarantor_ssn' => :'String',
        :'guarantor_date_begin' => :'Time',
        :'guarantor_date_end' => :'Time',
        :'guarantor_priority' => :'Integer',
        :'guarantor_employer_names' => :'Array<XPN>',
        :'guarantor_employer_addresses' => :'Array<XAD>',
        :'guarantor_employer_phone_numbers' => :'Array<XTN>',
        :'guarantor_employee_id_numbers' => :'Array<String>',
        :'guarantor_employment_status' => :'String',
        :'guarantor_organizations' => :'Array<XON>',
        :'guarantor_billing_hold_flag' => :'String',
        :'guarantor_credit_rating_code' => :'CE',
        :'guarantor_death_date_and_time' => :'Time',
        :'guarantor_death_flag' => :'Boolean',
        :'guarantor_charge_adjustment_code' => :'CE',
        :'guarantor_household_annual_income' => :'String',
        :'guarantor_household_size' => :'Integer',
        :'get_guarantor_employer_id_numbers' => :'Array<String>',
        :'guarantor_marital_status_code' => :'String',
        :'guarantor_hire_effective_date' => :'Time',
        :'employment_stop_date' => :'Time',
        :'living_dependency' => :'String',
        :'ambulatory_status' => :'String',
        :'citizenship' => :'String',
        :'primary_language' => :'CE',
        :'living_arrangement' => :'String',
        :'publicity_indicator' => :'CE',
        :'protection_indicator' => :'String',
        :'student_indicator' => :'String',
        :'religion' => :'String',
        :'mothers_maiden_name' => :'XPN',
        :'nationality_code' => :'CE',
        :'ethnic_group' => :'String',
        :'contact_persons_names' => :'Array<XPN>',
        :'contact_persons_telephone_numbers' => :'Array<XTN>',
        :'contact_reason' => :'CE',
        :'contact_relationship_code' => :'String',
        :'job_title' => :'String',
        :'job_code_class' => :'String',
        :'guarantor_employers_organization_name' => :'Array<XON>',
        :'handicap' => :'String',
        :'job_status' => :'String',
        :'guarantor_financial_class' => :'String',
        :'guarantor_race' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'guarantor_numbers',
        :'guarantor_names',
        :'guarantor_spouse_names',
        :'guarantor_addresses',
        :'guarantor_home_phone_numbers',
        :'guarantor_business_phone_numbers',
        :'guarantor_date_time_of_birth',
        :'guarantor_sex',
        :'guarantor_type',
        :'guarantor_relationship',
        :'guarantor_ssn',
        :'guarantor_date_begin',
        :'guarantor_date_end',
        :'guarantor_priority',
        :'guarantor_employer_names',
        :'guarantor_employer_addresses',
        :'guarantor_employer_phone_numbers',
        :'guarantor_employee_id_numbers',
        :'guarantor_employment_status',
        :'guarantor_organizations',
        :'guarantor_billing_hold_flag',
        :'guarantor_death_date_and_time',
        :'guarantor_death_flag',
        :'guarantor_household_annual_income',
        :'guarantor_household_size',
        :'get_guarantor_employer_id_numbers',
        :'guarantor_marital_status_code',
        :'guarantor_hire_effective_date',
        :'employment_stop_date',
        :'living_dependency',
        :'ambulatory_status',
        :'citizenship',
        :'living_arrangement',
        :'protection_indicator',
        :'student_indicator',
        :'religion',
        :'ethnic_group',
        :'contact_persons_names',
        :'contact_persons_telephone_numbers',
        :'contact_relationship_code',
        :'job_title',
        :'job_code_class',
        :'guarantor_employers_organization_name',
        :'handicap',
        :'job_status',
        :'guarantor_financial_class',
        :'guarantor_race'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GeneByGene::GT1` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GeneByGene::GT1`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'set_id')
        self.set_id = attributes[:'set_id']
      end

      if attributes.key?(:'guarantor_numbers')
        if (value = attributes[:'guarantor_numbers']).is_a?(Array)
          self.guarantor_numbers = value
        end
      end

      if attributes.key?(:'guarantor_names')
        if (value = attributes[:'guarantor_names']).is_a?(Array)
          self.guarantor_names = value
        end
      end

      if attributes.key?(:'guarantor_spouse_names')
        if (value = attributes[:'guarantor_spouse_names']).is_a?(Array)
          self.guarantor_spouse_names = value
        end
      end

      if attributes.key?(:'guarantor_addresses')
        if (value = attributes[:'guarantor_addresses']).is_a?(Array)
          self.guarantor_addresses = value
        end
      end

      if attributes.key?(:'guarantor_home_phone_numbers')
        if (value = attributes[:'guarantor_home_phone_numbers']).is_a?(Array)
          self.guarantor_home_phone_numbers = value
        end
      end

      if attributes.key?(:'guarantor_business_phone_numbers')
        if (value = attributes[:'guarantor_business_phone_numbers']).is_a?(Array)
          self.guarantor_business_phone_numbers = value
        end
      end

      if attributes.key?(:'guarantor_date_time_of_birth')
        self.guarantor_date_time_of_birth = attributes[:'guarantor_date_time_of_birth']
      end

      if attributes.key?(:'guarantor_sex')
        self.guarantor_sex = attributes[:'guarantor_sex']
      end

      if attributes.key?(:'guarantor_type')
        self.guarantor_type = attributes[:'guarantor_type']
      end

      if attributes.key?(:'guarantor_relationship')
        self.guarantor_relationship = attributes[:'guarantor_relationship']
      end

      if attributes.key?(:'guarantor_ssn')
        self.guarantor_ssn = attributes[:'guarantor_ssn']
      end

      if attributes.key?(:'guarantor_date_begin')
        self.guarantor_date_begin = attributes[:'guarantor_date_begin']
      end

      if attributes.key?(:'guarantor_date_end')
        self.guarantor_date_end = attributes[:'guarantor_date_end']
      end

      if attributes.key?(:'guarantor_priority')
        self.guarantor_priority = attributes[:'guarantor_priority']
      end

      if attributes.key?(:'guarantor_employer_names')
        if (value = attributes[:'guarantor_employer_names']).is_a?(Array)
          self.guarantor_employer_names = value
        end
      end

      if attributes.key?(:'guarantor_employer_addresses')
        if (value = attributes[:'guarantor_employer_addresses']).is_a?(Array)
          self.guarantor_employer_addresses = value
        end
      end

      if attributes.key?(:'guarantor_employer_phone_numbers')
        if (value = attributes[:'guarantor_employer_phone_numbers']).is_a?(Array)
          self.guarantor_employer_phone_numbers = value
        end
      end

      if attributes.key?(:'guarantor_employee_id_numbers')
        if (value = attributes[:'guarantor_employee_id_numbers']).is_a?(Array)
          self.guarantor_employee_id_numbers = value
        end
      end

      if attributes.key?(:'guarantor_employment_status')
        self.guarantor_employment_status = attributes[:'guarantor_employment_status']
      end

      if attributes.key?(:'guarantor_organizations')
        if (value = attributes[:'guarantor_organizations']).is_a?(Array)
          self.guarantor_organizations = value
        end
      end

      if attributes.key?(:'guarantor_billing_hold_flag')
        self.guarantor_billing_hold_flag = attributes[:'guarantor_billing_hold_flag']
      end

      if attributes.key?(:'guarantor_credit_rating_code')
        self.guarantor_credit_rating_code = attributes[:'guarantor_credit_rating_code']
      end

      if attributes.key?(:'guarantor_death_date_and_time')
        self.guarantor_death_date_and_time = attributes[:'guarantor_death_date_and_time']
      end

      if attributes.key?(:'guarantor_death_flag')
        self.guarantor_death_flag = attributes[:'guarantor_death_flag']
      end

      if attributes.key?(:'guarantor_charge_adjustment_code')
        self.guarantor_charge_adjustment_code = attributes[:'guarantor_charge_adjustment_code']
      end

      if attributes.key?(:'guarantor_household_annual_income')
        self.guarantor_household_annual_income = attributes[:'guarantor_household_annual_income']
      end

      if attributes.key?(:'guarantor_household_size')
        self.guarantor_household_size = attributes[:'guarantor_household_size']
      end

      if attributes.key?(:'get_guarantor_employer_id_numbers')
        if (value = attributes[:'get_guarantor_employer_id_numbers']).is_a?(Array)
          self.get_guarantor_employer_id_numbers = value
        end
      end

      if attributes.key?(:'guarantor_marital_status_code')
        self.guarantor_marital_status_code = attributes[:'guarantor_marital_status_code']
      end

      if attributes.key?(:'guarantor_hire_effective_date')
        self.guarantor_hire_effective_date = attributes[:'guarantor_hire_effective_date']
      end

      if attributes.key?(:'employment_stop_date')
        self.employment_stop_date = attributes[:'employment_stop_date']
      end

      if attributes.key?(:'living_dependency')
        self.living_dependency = attributes[:'living_dependency']
      end

      if attributes.key?(:'ambulatory_status')
        self.ambulatory_status = attributes[:'ambulatory_status']
      end

      if attributes.key?(:'citizenship')
        self.citizenship = attributes[:'citizenship']
      end

      if attributes.key?(:'primary_language')
        self.primary_language = attributes[:'primary_language']
      end

      if attributes.key?(:'living_arrangement')
        self.living_arrangement = attributes[:'living_arrangement']
      end

      if attributes.key?(:'publicity_indicator')
        self.publicity_indicator = attributes[:'publicity_indicator']
      end

      if attributes.key?(:'protection_indicator')
        self.protection_indicator = attributes[:'protection_indicator']
      end

      if attributes.key?(:'student_indicator')
        self.student_indicator = attributes[:'student_indicator']
      end

      if attributes.key?(:'religion')
        self.religion = attributes[:'religion']
      end

      if attributes.key?(:'mothers_maiden_name')
        self.mothers_maiden_name = attributes[:'mothers_maiden_name']
      end

      if attributes.key?(:'nationality_code')
        self.nationality_code = attributes[:'nationality_code']
      end

      if attributes.key?(:'ethnic_group')
        self.ethnic_group = attributes[:'ethnic_group']
      end

      if attributes.key?(:'contact_persons_names')
        if (value = attributes[:'contact_persons_names']).is_a?(Array)
          self.contact_persons_names = value
        end
      end

      if attributes.key?(:'contact_persons_telephone_numbers')
        if (value = attributes[:'contact_persons_telephone_numbers']).is_a?(Array)
          self.contact_persons_telephone_numbers = value
        end
      end

      if attributes.key?(:'contact_reason')
        self.contact_reason = attributes[:'contact_reason']
      end

      if attributes.key?(:'contact_relationship_code')
        self.contact_relationship_code = attributes[:'contact_relationship_code']
      end

      if attributes.key?(:'job_title')
        self.job_title = attributes[:'job_title']
      end

      if attributes.key?(:'job_code_class')
        self.job_code_class = attributes[:'job_code_class']
      end

      if attributes.key?(:'guarantor_employers_organization_name')
        if (value = attributes[:'guarantor_employers_organization_name']).is_a?(Array)
          self.guarantor_employers_organization_name = value
        end
      end

      if attributes.key?(:'handicap')
        self.handicap = attributes[:'handicap']
      end

      if attributes.key?(:'job_status')
        self.job_status = attributes[:'job_status']
      end

      if attributes.key?(:'guarantor_financial_class')
        self.guarantor_financial_class = attributes[:'guarantor_financial_class']
      end

      if attributes.key?(:'guarantor_race')
        self.guarantor_race = attributes[:'guarantor_race']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          set_id == o.set_id &&
          guarantor_numbers == o.guarantor_numbers &&
          guarantor_names == o.guarantor_names &&
          guarantor_spouse_names == o.guarantor_spouse_names &&
          guarantor_addresses == o.guarantor_addresses &&
          guarantor_home_phone_numbers == o.guarantor_home_phone_numbers &&
          guarantor_business_phone_numbers == o.guarantor_business_phone_numbers &&
          guarantor_date_time_of_birth == o.guarantor_date_time_of_birth &&
          guarantor_sex == o.guarantor_sex &&
          guarantor_type == o.guarantor_type &&
          guarantor_relationship == o.guarantor_relationship &&
          guarantor_ssn == o.guarantor_ssn &&
          guarantor_date_begin == o.guarantor_date_begin &&
          guarantor_date_end == o.guarantor_date_end &&
          guarantor_priority == o.guarantor_priority &&
          guarantor_employer_names == o.guarantor_employer_names &&
          guarantor_employer_addresses == o.guarantor_employer_addresses &&
          guarantor_employer_phone_numbers == o.guarantor_employer_phone_numbers &&
          guarantor_employee_id_numbers == o.guarantor_employee_id_numbers &&
          guarantor_employment_status == o.guarantor_employment_status &&
          guarantor_organizations == o.guarantor_organizations &&
          guarantor_billing_hold_flag == o.guarantor_billing_hold_flag &&
          guarantor_credit_rating_code == o.guarantor_credit_rating_code &&
          guarantor_death_date_and_time == o.guarantor_death_date_and_time &&
          guarantor_death_flag == o.guarantor_death_flag &&
          guarantor_charge_adjustment_code == o.guarantor_charge_adjustment_code &&
          guarantor_household_annual_income == o.guarantor_household_annual_income &&
          guarantor_household_size == o.guarantor_household_size &&
          get_guarantor_employer_id_numbers == o.get_guarantor_employer_id_numbers &&
          guarantor_marital_status_code == o.guarantor_marital_status_code &&
          guarantor_hire_effective_date == o.guarantor_hire_effective_date &&
          employment_stop_date == o.employment_stop_date &&
          living_dependency == o.living_dependency &&
          ambulatory_status == o.ambulatory_status &&
          citizenship == o.citizenship &&
          primary_language == o.primary_language &&
          living_arrangement == o.living_arrangement &&
          publicity_indicator == o.publicity_indicator &&
          protection_indicator == o.protection_indicator &&
          student_indicator == o.student_indicator &&
          religion == o.religion &&
          mothers_maiden_name == o.mothers_maiden_name &&
          nationality_code == o.nationality_code &&
          ethnic_group == o.ethnic_group &&
          contact_persons_names == o.contact_persons_names &&
          contact_persons_telephone_numbers == o.contact_persons_telephone_numbers &&
          contact_reason == o.contact_reason &&
          contact_relationship_code == o.contact_relationship_code &&
          job_title == o.job_title &&
          job_code_class == o.job_code_class &&
          guarantor_employers_organization_name == o.guarantor_employers_organization_name &&
          handicap == o.handicap &&
          job_status == o.job_status &&
          guarantor_financial_class == o.guarantor_financial_class &&
          guarantor_race == o.guarantor_race
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [set_id, guarantor_numbers, guarantor_names, guarantor_spouse_names, guarantor_addresses, guarantor_home_phone_numbers, guarantor_business_phone_numbers, guarantor_date_time_of_birth, guarantor_sex, guarantor_type, guarantor_relationship, guarantor_ssn, guarantor_date_begin, guarantor_date_end, guarantor_priority, guarantor_employer_names, guarantor_employer_addresses, guarantor_employer_phone_numbers, guarantor_employee_id_numbers, guarantor_employment_status, guarantor_organizations, guarantor_billing_hold_flag, guarantor_credit_rating_code, guarantor_death_date_and_time, guarantor_death_flag, guarantor_charge_adjustment_code, guarantor_household_annual_income, guarantor_household_size, get_guarantor_employer_id_numbers, guarantor_marital_status_code, guarantor_hire_effective_date, employment_stop_date, living_dependency, ambulatory_status, citizenship, primary_language, living_arrangement, publicity_indicator, protection_indicator, student_indicator, religion, mothers_maiden_name, nationality_code, ethnic_group, contact_persons_names, contact_persons_telephone_numbers, contact_reason, contact_relationship_code, job_title, job_code_class, guarantor_employers_organization_name, handicap, job_status, guarantor_financial_class, guarantor_race].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GeneByGene.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
