=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module GeneByGene
  class DG1
    attr_accessor :set_id

    attr_accessor :diagnosis_coding_method

    attr_accessor :diagnosis_code

    attr_accessor :diagnosis_description

    attr_accessor :diagnosis_date_time

    attr_accessor :diagnosis_type

    attr_accessor :major_diagnostic_category

    attr_accessor :diagnostic_related_group

    attr_accessor :drg_approval_indicator

    attr_accessor :drg_grouper_review_code

    attr_accessor :outlier_type

    attr_accessor :outlier_days

    attr_accessor :outlier_cost

    attr_accessor :grouper_version_and_type

    attr_accessor :diagnosis_priority

    attr_accessor :diagnosing_clinicians

    attr_accessor :diagnosis_classification

    attr_accessor :confidential_indicator

    attr_accessor :attestation_date_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'set_id' => :'setId',
        :'diagnosis_coding_method' => :'diagnosisCodingMethod',
        :'diagnosis_code' => :'diagnosisCode',
        :'diagnosis_description' => :'diagnosisDescription',
        :'diagnosis_date_time' => :'diagnosisDateTime',
        :'diagnosis_type' => :'diagnosisType',
        :'major_diagnostic_category' => :'majorDiagnosticCategory',
        :'diagnostic_related_group' => :'diagnosticRelatedGroup',
        :'drg_approval_indicator' => :'drgApprovalIndicator',
        :'drg_grouper_review_code' => :'drgGrouperReviewCode',
        :'outlier_type' => :'outlierType',
        :'outlier_days' => :'outlierDays',
        :'outlier_cost' => :'outlierCost',
        :'grouper_version_and_type' => :'grouperVersionAndType',
        :'diagnosis_priority' => :'diagnosisPriority',
        :'diagnosing_clinicians' => :'diagnosingClinicians',
        :'diagnosis_classification' => :'diagnosisClassification',
        :'confidential_indicator' => :'confidentialIndicator',
        :'attestation_date_time' => :'attestationDateTime'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'set_id' => :'Integer',
        :'diagnosis_coding_method' => :'String',
        :'diagnosis_code' => :'CE',
        :'diagnosis_description' => :'String',
        :'diagnosis_date_time' => :'Time',
        :'diagnosis_type' => :'String',
        :'major_diagnostic_category' => :'CE',
        :'diagnostic_related_group' => :'CE',
        :'drg_approval_indicator' => :'String',
        :'drg_grouper_review_code' => :'String',
        :'outlier_type' => :'CE',
        :'outlier_days' => :'Float',
        :'outlier_cost' => :'String',
        :'grouper_version_and_type' => :'String',
        :'diagnosis_priority' => :'Integer',
        :'diagnosing_clinicians' => :'Array<XCN>',
        :'diagnosis_classification' => :'String',
        :'confidential_indicator' => :'String',
        :'attestation_date_time' => :'Time'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'diagnosis_coding_method',
        :'diagnosis_description',
        :'diagnosis_date_time',
        :'diagnosis_type',
        :'drg_approval_indicator',
        :'drg_grouper_review_code',
        :'outlier_days',
        :'outlier_cost',
        :'grouper_version_and_type',
        :'diagnosis_priority',
        :'diagnosing_clinicians',
        :'diagnosis_classification',
        :'confidential_indicator',
        :'attestation_date_time'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GeneByGene::DG1` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GeneByGene::DG1`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'set_id')
        self.set_id = attributes[:'set_id']
      end

      if attributes.key?(:'diagnosis_coding_method')
        self.diagnosis_coding_method = attributes[:'diagnosis_coding_method']
      end

      if attributes.key?(:'diagnosis_code')
        self.diagnosis_code = attributes[:'diagnosis_code']
      end

      if attributes.key?(:'diagnosis_description')
        self.diagnosis_description = attributes[:'diagnosis_description']
      end

      if attributes.key?(:'diagnosis_date_time')
        self.diagnosis_date_time = attributes[:'diagnosis_date_time']
      end

      if attributes.key?(:'diagnosis_type')
        self.diagnosis_type = attributes[:'diagnosis_type']
      end

      if attributes.key?(:'major_diagnostic_category')
        self.major_diagnostic_category = attributes[:'major_diagnostic_category']
      end

      if attributes.key?(:'diagnostic_related_group')
        self.diagnostic_related_group = attributes[:'diagnostic_related_group']
      end

      if attributes.key?(:'drg_approval_indicator')
        self.drg_approval_indicator = attributes[:'drg_approval_indicator']
      end

      if attributes.key?(:'drg_grouper_review_code')
        self.drg_grouper_review_code = attributes[:'drg_grouper_review_code']
      end

      if attributes.key?(:'outlier_type')
        self.outlier_type = attributes[:'outlier_type']
      end

      if attributes.key?(:'outlier_days')
        self.outlier_days = attributes[:'outlier_days']
      end

      if attributes.key?(:'outlier_cost')
        self.outlier_cost = attributes[:'outlier_cost']
      end

      if attributes.key?(:'grouper_version_and_type')
        self.grouper_version_and_type = attributes[:'grouper_version_and_type']
      end

      if attributes.key?(:'diagnosis_priority')
        self.diagnosis_priority = attributes[:'diagnosis_priority']
      end

      if attributes.key?(:'diagnosing_clinicians')
        if (value = attributes[:'diagnosing_clinicians']).is_a?(Array)
          self.diagnosing_clinicians = value
        end
      end

      if attributes.key?(:'diagnosis_classification')
        self.diagnosis_classification = attributes[:'diagnosis_classification']
      end

      if attributes.key?(:'confidential_indicator')
        self.confidential_indicator = attributes[:'confidential_indicator']
      end

      if attributes.key?(:'attestation_date_time')
        self.attestation_date_time = attributes[:'attestation_date_time']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          set_id == o.set_id &&
          diagnosis_coding_method == o.diagnosis_coding_method &&
          diagnosis_code == o.diagnosis_code &&
          diagnosis_description == o.diagnosis_description &&
          diagnosis_date_time == o.diagnosis_date_time &&
          diagnosis_type == o.diagnosis_type &&
          major_diagnostic_category == o.major_diagnostic_category &&
          diagnostic_related_group == o.diagnostic_related_group &&
          drg_approval_indicator == o.drg_approval_indicator &&
          drg_grouper_review_code == o.drg_grouper_review_code &&
          outlier_type == o.outlier_type &&
          outlier_days == o.outlier_days &&
          outlier_cost == o.outlier_cost &&
          grouper_version_and_type == o.grouper_version_and_type &&
          diagnosis_priority == o.diagnosis_priority &&
          diagnosing_clinicians == o.diagnosing_clinicians &&
          diagnosis_classification == o.diagnosis_classification &&
          confidential_indicator == o.confidential_indicator &&
          attestation_date_time == o.attestation_date_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [set_id, diagnosis_coding_method, diagnosis_code, diagnosis_description, diagnosis_date_time, diagnosis_type, major_diagnostic_category, diagnostic_related_group, drg_approval_indicator, drg_grouper_review_code, outlier_type, outlier_days, outlier_cost, grouper_version_and_type, diagnosis_priority, diagnosing_clinicians, diagnosis_classification, confidential_indicator, attestation_date_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GeneByGene.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
