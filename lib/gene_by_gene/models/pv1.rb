=begin
#Nucleus API v2.0

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'date'
require 'time'

module GeneByGene
  class PV1
    attr_accessor :set_id

    attr_accessor :patient_class

    attr_accessor :assigned_patient_location

    attr_accessor :admission_type

    attr_accessor :preadmit_number

    attr_accessor :prior_patient_location

    attr_accessor :attending_doctors

    attr_accessor :referring_doctors

    attr_accessor :consulting_doctors

    attr_accessor :hospital_service

    attr_accessor :temporary_location

    attr_accessor :preadmit_test_indicator

    attr_accessor :readmission_indicator

    attr_accessor :admit_source

    attr_accessor :ambulatory_statuses

    attr_accessor :vip_indicator

    attr_accessor :admitting_doctors

    attr_accessor :patient_type

    attr_accessor :visit_number

    attr_accessor :financial_classes

    attr_accessor :charge_price_indicator

    attr_accessor :courtesy_code

    attr_accessor :credit_rating

    attr_accessor :contract_codes

    attr_accessor :contract_effective_dates

    attr_accessor :contract_amounts

    attr_accessor :contract_periods

    attr_accessor :interest_code

    attr_accessor :transfer_to_bad_debt_code

    attr_accessor :transfer_to_bad_debt_date

    attr_accessor :bad_debt_agency_code

    attr_accessor :bad_debt_transfer_amount

    attr_accessor :bad_debt_recovery_amount

    attr_accessor :delete_account_indicator

    attr_accessor :delete_account_date

    attr_accessor :discharge_disposition

    attr_accessor :discharged_to_location

    attr_accessor :diet_type

    attr_accessor :servicing_facility

    attr_accessor :bed_status

    attr_accessor :account_status

    attr_accessor :pending_location

    attr_accessor :prior_temporary_location

    attr_accessor :admit_date_time

    attr_accessor :discharge_date_time

    attr_accessor :current_patient_balance

    attr_accessor :total_charges

    attr_accessor :total_adjustments

    attr_accessor :total_payments

    attr_accessor :alternate_visit_id

    attr_accessor :visit_indicator

    attr_accessor :other_healthcare_providers

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'set_id' => :'setId',
        :'patient_class' => :'patientClass',
        :'assigned_patient_location' => :'assignedPatientLocation',
        :'admission_type' => :'admissionType',
        :'preadmit_number' => :'preadmitNumber',
        :'prior_patient_location' => :'priorPatientLocation',
        :'attending_doctors' => :'attendingDoctors',
        :'referring_doctors' => :'referringDoctors',
        :'consulting_doctors' => :'consultingDoctors',
        :'hospital_service' => :'hospitalService',
        :'temporary_location' => :'temporaryLocation',
        :'preadmit_test_indicator' => :'preadmitTestIndicator',
        :'readmission_indicator' => :'readmissionIndicator',
        :'admit_source' => :'admitSource',
        :'ambulatory_statuses' => :'ambulatoryStatuses',
        :'vip_indicator' => :'vipIndicator',
        :'admitting_doctors' => :'admittingDoctors',
        :'patient_type' => :'patientType',
        :'visit_number' => :'visitNumber',
        :'financial_classes' => :'financialClasses',
        :'charge_price_indicator' => :'chargePriceIndicator',
        :'courtesy_code' => :'courtesyCode',
        :'credit_rating' => :'creditRating',
        :'contract_codes' => :'contractCodes',
        :'contract_effective_dates' => :'contractEffectiveDates',
        :'contract_amounts' => :'contractAmounts',
        :'contract_periods' => :'contractPeriods',
        :'interest_code' => :'interestCode',
        :'transfer_to_bad_debt_code' => :'transferToBadDebtCode',
        :'transfer_to_bad_debt_date' => :'transferToBadDebtDate',
        :'bad_debt_agency_code' => :'badDebtAgencyCode',
        :'bad_debt_transfer_amount' => :'badDebtTransferAmount',
        :'bad_debt_recovery_amount' => :'badDebtRecoveryAmount',
        :'delete_account_indicator' => :'deleteAccountIndicator',
        :'delete_account_date' => :'deleteAccountDate',
        :'discharge_disposition' => :'dischargeDisposition',
        :'discharged_to_location' => :'dischargedToLocation',
        :'diet_type' => :'dietType',
        :'servicing_facility' => :'servicingFacility',
        :'bed_status' => :'bedStatus',
        :'account_status' => :'accountStatus',
        :'pending_location' => :'pendingLocation',
        :'prior_temporary_location' => :'priorTemporaryLocation',
        :'admit_date_time' => :'admitDateTime',
        :'discharge_date_time' => :'dischargeDateTime',
        :'current_patient_balance' => :'currentPatientBalance',
        :'total_charges' => :'totalCharges',
        :'total_adjustments' => :'totalAdjustments',
        :'total_payments' => :'totalPayments',
        :'alternate_visit_id' => :'alternateVisitId',
        :'visit_indicator' => :'visitIndicator',
        :'other_healthcare_providers' => :'otherHealthcareProviders'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'set_id' => :'Integer',
        :'patient_class' => :'String',
        :'assigned_patient_location' => :'String',
        :'admission_type' => :'String',
        :'preadmit_number' => :'String',
        :'prior_patient_location' => :'String',
        :'attending_doctors' => :'Array<XCN>',
        :'referring_doctors' => :'Array<XCN>',
        :'consulting_doctors' => :'Array<XCN>',
        :'hospital_service' => :'String',
        :'temporary_location' => :'String',
        :'preadmit_test_indicator' => :'String',
        :'readmission_indicator' => :'String',
        :'admit_source' => :'String',
        :'ambulatory_statuses' => :'Array<String>',
        :'vip_indicator' => :'String',
        :'admitting_doctors' => :'Array<XCN>',
        :'patient_type' => :'String',
        :'visit_number' => :'String',
        :'financial_classes' => :'Array<String>',
        :'charge_price_indicator' => :'String',
        :'courtesy_code' => :'String',
        :'credit_rating' => :'String',
        :'contract_codes' => :'Array<String>',
        :'contract_effective_dates' => :'Array<Time>',
        :'contract_amounts' => :'Array<Float>',
        :'contract_periods' => :'Array<Float>',
        :'interest_code' => :'String',
        :'transfer_to_bad_debt_code' => :'String',
        :'transfer_to_bad_debt_date' => :'Time',
        :'bad_debt_agency_code' => :'String',
        :'bad_debt_transfer_amount' => :'Float',
        :'bad_debt_recovery_amount' => :'String',
        :'delete_account_indicator' => :'String',
        :'delete_account_date' => :'Time',
        :'discharge_disposition' => :'String',
        :'discharged_to_location' => :'String',
        :'diet_type' => :'String',
        :'servicing_facility' => :'String',
        :'bed_status' => :'String',
        :'account_status' => :'String',
        :'pending_location' => :'String',
        :'prior_temporary_location' => :'String',
        :'admit_date_time' => :'Time',
        :'discharge_date_time' => :'Time',
        :'current_patient_balance' => :'Float',
        :'total_charges' => :'Float',
        :'total_adjustments' => :'Float',
        :'total_payments' => :'Float',
        :'alternate_visit_id' => :'String',
        :'visit_indicator' => :'String',
        :'other_healthcare_providers' => :'Array<XCN>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'patient_class',
        :'assigned_patient_location',
        :'admission_type',
        :'preadmit_number',
        :'prior_patient_location',
        :'attending_doctors',
        :'referring_doctors',
        :'consulting_doctors',
        :'hospital_service',
        :'temporary_location',
        :'preadmit_test_indicator',
        :'readmission_indicator',
        :'admit_source',
        :'ambulatory_statuses',
        :'vip_indicator',
        :'admitting_doctors',
        :'patient_type',
        :'visit_number',
        :'financial_classes',
        :'charge_price_indicator',
        :'courtesy_code',
        :'credit_rating',
        :'contract_codes',
        :'contract_effective_dates',
        :'contract_amounts',
        :'contract_periods',
        :'interest_code',
        :'transfer_to_bad_debt_code',
        :'transfer_to_bad_debt_date',
        :'bad_debt_agency_code',
        :'bad_debt_transfer_amount',
        :'bad_debt_recovery_amount',
        :'delete_account_indicator',
        :'delete_account_date',
        :'discharge_disposition',
        :'discharged_to_location',
        :'diet_type',
        :'servicing_facility',
        :'bed_status',
        :'account_status',
        :'pending_location',
        :'prior_temporary_location',
        :'admit_date_time',
        :'discharge_date_time',
        :'current_patient_balance',
        :'total_charges',
        :'total_adjustments',
        :'total_payments',
        :'alternate_visit_id',
        :'visit_indicator',
        :'other_healthcare_providers'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `GeneByGene::PV1` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `GeneByGene::PV1`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'set_id')
        self.set_id = attributes[:'set_id']
      end

      if attributes.key?(:'patient_class')
        self.patient_class = attributes[:'patient_class']
      end

      if attributes.key?(:'assigned_patient_location')
        self.assigned_patient_location = attributes[:'assigned_patient_location']
      end

      if attributes.key?(:'admission_type')
        self.admission_type = attributes[:'admission_type']
      end

      if attributes.key?(:'preadmit_number')
        self.preadmit_number = attributes[:'preadmit_number']
      end

      if attributes.key?(:'prior_patient_location')
        self.prior_patient_location = attributes[:'prior_patient_location']
      end

      if attributes.key?(:'attending_doctors')
        if (value = attributes[:'attending_doctors']).is_a?(Array)
          self.attending_doctors = value
        end
      end

      if attributes.key?(:'referring_doctors')
        if (value = attributes[:'referring_doctors']).is_a?(Array)
          self.referring_doctors = value
        end
      end

      if attributes.key?(:'consulting_doctors')
        if (value = attributes[:'consulting_doctors']).is_a?(Array)
          self.consulting_doctors = value
        end
      end

      if attributes.key?(:'hospital_service')
        self.hospital_service = attributes[:'hospital_service']
      end

      if attributes.key?(:'temporary_location')
        self.temporary_location = attributes[:'temporary_location']
      end

      if attributes.key?(:'preadmit_test_indicator')
        self.preadmit_test_indicator = attributes[:'preadmit_test_indicator']
      end

      if attributes.key?(:'readmission_indicator')
        self.readmission_indicator = attributes[:'readmission_indicator']
      end

      if attributes.key?(:'admit_source')
        self.admit_source = attributes[:'admit_source']
      end

      if attributes.key?(:'ambulatory_statuses')
        if (value = attributes[:'ambulatory_statuses']).is_a?(Array)
          self.ambulatory_statuses = value
        end
      end

      if attributes.key?(:'vip_indicator')
        self.vip_indicator = attributes[:'vip_indicator']
      end

      if attributes.key?(:'admitting_doctors')
        if (value = attributes[:'admitting_doctors']).is_a?(Array)
          self.admitting_doctors = value
        end
      end

      if attributes.key?(:'patient_type')
        self.patient_type = attributes[:'patient_type']
      end

      if attributes.key?(:'visit_number')
        self.visit_number = attributes[:'visit_number']
      end

      if attributes.key?(:'financial_classes')
        if (value = attributes[:'financial_classes']).is_a?(Array)
          self.financial_classes = value
        end
      end

      if attributes.key?(:'charge_price_indicator')
        self.charge_price_indicator = attributes[:'charge_price_indicator']
      end

      if attributes.key?(:'courtesy_code')
        self.courtesy_code = attributes[:'courtesy_code']
      end

      if attributes.key?(:'credit_rating')
        self.credit_rating = attributes[:'credit_rating']
      end

      if attributes.key?(:'contract_codes')
        if (value = attributes[:'contract_codes']).is_a?(Array)
          self.contract_codes = value
        end
      end

      if attributes.key?(:'contract_effective_dates')
        if (value = attributes[:'contract_effective_dates']).is_a?(Array)
          self.contract_effective_dates = value
        end
      end

      if attributes.key?(:'contract_amounts')
        if (value = attributes[:'contract_amounts']).is_a?(Array)
          self.contract_amounts = value
        end
      end

      if attributes.key?(:'contract_periods')
        if (value = attributes[:'contract_periods']).is_a?(Array)
          self.contract_periods = value
        end
      end

      if attributes.key?(:'interest_code')
        self.interest_code = attributes[:'interest_code']
      end

      if attributes.key?(:'transfer_to_bad_debt_code')
        self.transfer_to_bad_debt_code = attributes[:'transfer_to_bad_debt_code']
      end

      if attributes.key?(:'transfer_to_bad_debt_date')
        self.transfer_to_bad_debt_date = attributes[:'transfer_to_bad_debt_date']
      end

      if attributes.key?(:'bad_debt_agency_code')
        self.bad_debt_agency_code = attributes[:'bad_debt_agency_code']
      end

      if attributes.key?(:'bad_debt_transfer_amount')
        self.bad_debt_transfer_amount = attributes[:'bad_debt_transfer_amount']
      end

      if attributes.key?(:'bad_debt_recovery_amount')
        self.bad_debt_recovery_amount = attributes[:'bad_debt_recovery_amount']
      end

      if attributes.key?(:'delete_account_indicator')
        self.delete_account_indicator = attributes[:'delete_account_indicator']
      end

      if attributes.key?(:'delete_account_date')
        self.delete_account_date = attributes[:'delete_account_date']
      end

      if attributes.key?(:'discharge_disposition')
        self.discharge_disposition = attributes[:'discharge_disposition']
      end

      if attributes.key?(:'discharged_to_location')
        self.discharged_to_location = attributes[:'discharged_to_location']
      end

      if attributes.key?(:'diet_type')
        self.diet_type = attributes[:'diet_type']
      end

      if attributes.key?(:'servicing_facility')
        self.servicing_facility = attributes[:'servicing_facility']
      end

      if attributes.key?(:'bed_status')
        self.bed_status = attributes[:'bed_status']
      end

      if attributes.key?(:'account_status')
        self.account_status = attributes[:'account_status']
      end

      if attributes.key?(:'pending_location')
        self.pending_location = attributes[:'pending_location']
      end

      if attributes.key?(:'prior_temporary_location')
        self.prior_temporary_location = attributes[:'prior_temporary_location']
      end

      if attributes.key?(:'admit_date_time')
        self.admit_date_time = attributes[:'admit_date_time']
      end

      if attributes.key?(:'discharge_date_time')
        self.discharge_date_time = attributes[:'discharge_date_time']
      end

      if attributes.key?(:'current_patient_balance')
        self.current_patient_balance = attributes[:'current_patient_balance']
      end

      if attributes.key?(:'total_charges')
        self.total_charges = attributes[:'total_charges']
      end

      if attributes.key?(:'total_adjustments')
        self.total_adjustments = attributes[:'total_adjustments']
      end

      if attributes.key?(:'total_payments')
        self.total_payments = attributes[:'total_payments']
      end

      if attributes.key?(:'alternate_visit_id')
        self.alternate_visit_id = attributes[:'alternate_visit_id']
      end

      if attributes.key?(:'visit_indicator')
        self.visit_indicator = attributes[:'visit_indicator']
      end

      if attributes.key?(:'other_healthcare_providers')
        if (value = attributes[:'other_healthcare_providers']).is_a?(Array)
          self.other_healthcare_providers = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          set_id == o.set_id &&
          patient_class == o.patient_class &&
          assigned_patient_location == o.assigned_patient_location &&
          admission_type == o.admission_type &&
          preadmit_number == o.preadmit_number &&
          prior_patient_location == o.prior_patient_location &&
          attending_doctors == o.attending_doctors &&
          referring_doctors == o.referring_doctors &&
          consulting_doctors == o.consulting_doctors &&
          hospital_service == o.hospital_service &&
          temporary_location == o.temporary_location &&
          preadmit_test_indicator == o.preadmit_test_indicator &&
          readmission_indicator == o.readmission_indicator &&
          admit_source == o.admit_source &&
          ambulatory_statuses == o.ambulatory_statuses &&
          vip_indicator == o.vip_indicator &&
          admitting_doctors == o.admitting_doctors &&
          patient_type == o.patient_type &&
          visit_number == o.visit_number &&
          financial_classes == o.financial_classes &&
          charge_price_indicator == o.charge_price_indicator &&
          courtesy_code == o.courtesy_code &&
          credit_rating == o.credit_rating &&
          contract_codes == o.contract_codes &&
          contract_effective_dates == o.contract_effective_dates &&
          contract_amounts == o.contract_amounts &&
          contract_periods == o.contract_periods &&
          interest_code == o.interest_code &&
          transfer_to_bad_debt_code == o.transfer_to_bad_debt_code &&
          transfer_to_bad_debt_date == o.transfer_to_bad_debt_date &&
          bad_debt_agency_code == o.bad_debt_agency_code &&
          bad_debt_transfer_amount == o.bad_debt_transfer_amount &&
          bad_debt_recovery_amount == o.bad_debt_recovery_amount &&
          delete_account_indicator == o.delete_account_indicator &&
          delete_account_date == o.delete_account_date &&
          discharge_disposition == o.discharge_disposition &&
          discharged_to_location == o.discharged_to_location &&
          diet_type == o.diet_type &&
          servicing_facility == o.servicing_facility &&
          bed_status == o.bed_status &&
          account_status == o.account_status &&
          pending_location == o.pending_location &&
          prior_temporary_location == o.prior_temporary_location &&
          admit_date_time == o.admit_date_time &&
          discharge_date_time == o.discharge_date_time &&
          current_patient_balance == o.current_patient_balance &&
          total_charges == o.total_charges &&
          total_adjustments == o.total_adjustments &&
          total_payments == o.total_payments &&
          alternate_visit_id == o.alternate_visit_id &&
          visit_indicator == o.visit_indicator &&
          other_healthcare_providers == o.other_healthcare_providers
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [set_id, patient_class, assigned_patient_location, admission_type, preadmit_number, prior_patient_location, attending_doctors, referring_doctors, consulting_doctors, hospital_service, temporary_location, preadmit_test_indicator, readmission_indicator, admit_source, ambulatory_statuses, vip_indicator, admitting_doctors, patient_type, visit_number, financial_classes, charge_price_indicator, courtesy_code, credit_rating, contract_codes, contract_effective_dates, contract_amounts, contract_periods, interest_code, transfer_to_bad_debt_code, transfer_to_bad_debt_date, bad_debt_agency_code, bad_debt_transfer_amount, bad_debt_recovery_amount, delete_account_indicator, delete_account_date, discharge_disposition, discharged_to_location, diet_type, servicing_facility, bed_status, account_status, pending_location, prior_temporary_location, admit_date_time, discharge_date_time, current_patient_balance, total_charges, total_adjustments, total_payments, alternate_visit_id, visit_indicator, other_healthcare_providers].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = GeneByGene.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
